/*
 * This file was automatically generated by EvoSuite
 * Tue May 02 03:48:51 GMT 2023
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Subject_ESTest extends Subject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getDayOfWeek(0, 11, 11);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getDayOfWeek(9, 9, 30);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate(999999999, 999999999, (-706));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: 999999999
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate((-999999999), (-999999999), (-999999999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: -999999999
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getLengthOfMonth((-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: 0
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear((-687));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear(2100);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear(1900);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, objectArray0[1], 1354);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = Subject.CharTasks.compare('4', 'E');
      assertEquals((-17), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiAlphaLower('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiAlphaLower('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiAlpha('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiAlpha('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiControl('\u0081');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiControl(' ');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiPrintable('');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiPrintable(' ');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable("&|^'_.4B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) charBuffer0, (CharSequence) "0x0X0.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) "", (CharSequence) "Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[10];
      boolean boolean0 = Subject.StringTasks.containsNone("\"R6?vA2I5@O4`L", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'y';
      boolean boolean0 = Subject.StringTasks.containsAny("eD/_I", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("0");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Subject.StringTasks.chop("(e");
      assertEquals("(", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("0x0X'QYp%JE8T+:8lJ?");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isSeparator('n');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Subject.FilenameTasks.getName(";I/OOWgBn\"!}FI^e.a~");
      assertEquals("OOWgBn\"!}FI^e.a~", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.flipSeparator('\'');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // '
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = Subject.StringTasks.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiAlphaUpper('2');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = Subject.ArrayTasks.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Subject.ArrayTasks.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("U9/y&f-A#XP3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getDayOfWeek(1653, 12, 11);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getDayOfWeek(7, 10, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getDayOfWeek((-961), 8, 8);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getDayOfWeek(1, 1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek(11, 11, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day exceeds month length: 11-11-31
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek((-380), 6, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day exceeds month length: -380-06-31
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek(1095, 227, 227);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day out of range: 227
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek((-26), (-26), (-26));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day out of range: -26
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate(33, 11, 33);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DAY_OF_MONTH out of range: 33
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate(12, 12, (-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DAY_OF_MONTH out of range: -5
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate(1000000031, 13, 81);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR out of range: 1000000031
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate((-1073741822), (-1073741822), 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR out of range: -1073741822
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getLengthOfMonth((-1), 1033);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: 1033
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getDayOfWeek(6, 6, 6);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getDayOfWeek(4, 4, 4);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getDayOfWeek(2, 2, 2);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getLengthOfMonth(12, 12);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getDayOfWeek((-2566), 7, 7);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getDayOfWeek(5, 5, 16);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getDayOfWeek(15, 3, 15);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Subject.GregorianTasks.checkDate(10, 10, 10);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear(2088);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear(2531);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear(2071);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, object0, 60);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "00";
      objectArray0[1] = (Object) "c@";
      objectArray0[2] = (Object) "00";
      objectArray0[3] = objectArray0[2];
      objectArray0[4] = (Object) "c@";
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, (Object) null, 68);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, (Object) null, 68);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("#/XOiZ8l5_]");
      int int0 = Subject.ArrayTasks.lastIndexOf(stringArray0, "#/XOiZ8l5_]", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, (Object) null, (-524));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("U+xXL=R0e]$ }");
      Object object0 = new Object();
      int int0 = Subject.ArrayTasks.lastIndexOf(stringArray0, object0, 645);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = Subject.ArrayTasks.lastIndexOf((Object[]) null, (Object) null, (-4399));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiAlphaLower('\u0090');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiAlpha('g');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiAlpha('9');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiControl('');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiControl('\n');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiPrintable('\u0081');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiPrintable('\r');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAscii('C');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAscii('\u0082');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Character character0 = Character.valueOf('K');
      char char0 = Subject.CharTasks.toChar(character0, '!');
      assertEquals('K', char0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char char0 = Subject.CharTasks.toChar((Character) null, 'C');
      assertEquals('C', char0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = Subject.BooleanTasks.compare(true, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = Subject.BooleanTasks.compare(false, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = Subject.BooleanTasks.compare(false, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable(".L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable("-^z[kd!Xl'n,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigDecimal bigDecimal0 = Subject.NumberTasks.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigInteger("0c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigInteger bigInteger0 = Subject.NumberTasks.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("0X:(enp%O3nyp89#EY?`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \":(en\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigInteger("+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigInteger("-V+S:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // An empty string is not a valid number
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigInteger bigInteger0 = Subject.NumberTasks.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Long long0 = Subject.NumberTasks.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = Subject.NumberTasks.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Double double0 = Subject.NumberTasks.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = Subject.NumberTasks.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber(",>rh>jSs;VE1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character , is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Number number0 = Subject.NumberTasks.createNumber("0D");
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber(".L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .L is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Number number0 = Subject.NumberTasks.createNumber("1f");
      assertEquals(1.0F, number0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber(" 5/2P*$=d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  5/2P*$=d is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("XkL$VthDmlae");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // XkL$VthDmlae is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("fRgEM>&Y#\"He");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // fRgEM>&Y#\"He is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber(">vV1'e}RGL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // >vV1'e}RGL is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("UQwvy!QS.2=4E/${");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // UQwvy!QS.2=4E/${ is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber(",:E[y]Ub07bP3!.}e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ,:E[y]Ub07bP3!.}e is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("6W~\"e.!FQ,mQPBV ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 6W~\"e.!FQ,mQPBV  is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // No digits found.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("0Xo|9Cu/L4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"o|9Cu/L4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("0x0X'QYp%E8T+:8lJ?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0X'QYp%E8T+:8lJ?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("0x0X'QYp%JE8T+:8lJ?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("#jG]`-f-G(n2>W[IkS^^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("-U6SJf{VmB*BM");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -U6SJf{VmB*BM is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("+B:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // +B: is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Number number0 = Subject.NumberTasks.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Subject.StringTasks.replace("?Ee{o7lSMS0", "0", "0");
      assertEquals("?Ee{o7lSMS0", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = Subject.StringTasks.replace("d (KNr])]i>F$Xl", "d (KNr])]i>F$X", "UcYBQ1Z~6b&\"<");
      assertEquals("UcYBQ1Z~6b&\"<l", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = Subject.StringTasks.replace("s(#/kQhs7B", "s(#/kQhs7B", (String) null);
      assertEquals("s(#/kQhs7B", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Subject.StringTasks.replace("m`=/:/qRuSf1qyC_d", (String) null, (String) null);
      assertEquals("m`=/:/qRuSf1qyC_d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = Subject.StringTasks.replace("0x0X0.", "0x0X0.", "0x0X0.");
      assertEquals("0x0X0.", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Subject.StringTasks.replace((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isMixedCase(":D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isMixedCase("80n9~B");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isMixedCase("UQwvy!QS.2=4E/${");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isMixedCase("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isMixedCase("z#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = Subject.StringTasks.stripEnd("]3{", "]3{");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Subject.StringTasks.stripEnd("e::R|4%;Tyv|", "");
      assertEquals("e::R|4%;Tyv|", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Subject.StringTasks.stripEnd("fYd.M=GOIqNK ", (String) null);
      assertEquals("fYd.M=GOIqNK", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = Subject.StringTasks.stripEnd("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Subject.StringTasks.stripEnd("dt^9$C} ", "$Cc{x-gmnK+q:");
      assertEquals("dt^9$C} ", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "qM");
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) "qM", (CharSequence) charBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) "/u:A!:o#R65og<)&3", (CharSequence) "8oV;I];e5?LFw`XEZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) "qM", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) "}", (CharSequence) "}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) charBuffer0, (CharSequence) "0x0X0.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      boolean boolean0 = Subject.StringTasks.containsNone("4b:sX", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.containsNone("\"R6?vA2I5@O4`L", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = Subject.StringTasks.containsAny(charBuffer0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.containsAny("", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = Subject.StringTasks.splitByCharacterType("yRK`~,*p~Jjf");
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = Subject.StringTasks.chomp("U");
      assertEquals("U", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = Subject.StringTasks.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = Subject.StringTasks.chomp("dt^9$C} ");
      assertEquals("dt^9$C} ", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Subject.StringTasks.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = Subject.StringTasks.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = Subject.StringTasks.chop("d (KNr])]i>F$Xl");
      assertEquals("d (KNr])]i>F$X", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isDigits("|4A&mm=]T+YNMzc");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber(",L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // L is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber(" ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("0x:hR.|hN*V@*D");
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("*");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isSeparator('\\');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isSeparator('(');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isSeparator('/');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isRFC3986HostName("d (KNr])]i>F$X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isRFC3986HostName(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isRFC3986HostName("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isRFC3986HostName("0x");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("-7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("comp5111.assignment.cut.Subject$StringTasks");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("eD/_I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("q::R|4%;Tyv|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("+B::");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("$Cc{x-gmnK+q:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address(":4b:sX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("::>j#] GE,SqE:M");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address(":::");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.isIPv6Address("0.0.0.0");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv4Address("]^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = Subject.FilenameTasks.indexOfLastSeparator((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = Subject.FilenameTasks.getName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.flipSeparator('j');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // j
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char char0 = Subject.FilenameTasks.flipSeparator('/');
      assertEquals('\\', char0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char char0 = Subject.FilenameTasks.flipSeparator('\\');
      assertEquals('/', char0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Subject subject0 = new Subject();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Subject.BooleanTasks subject_BooleanTasks0 = new Subject.BooleanTasks();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("}zFTf0Bc>T]%[n+fXIl");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = Subject.StringTasks.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Subject.StringTasks subject_StringTasks0 = new Subject.StringTasks();
      assertEquals((-1), Subject.StringTasks.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Subject.FilenameTasks subject_FilenameTasks0 = new Subject.FilenameTasks();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = Subject.ArrayTasks.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Subject.ArrayTasks subject_ArrayTasks0 = new Subject.ArrayTasks();
      int int0 = Subject.ArrayTasks.lastIndexOf(subject_ArrayTasks0.EMPTY_STRING_ARRAY, subject_ArrayTasks0.INDEX_NOT_FOUND, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = Subject.StringTasks.containsAny("DC:,b }", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Subject.GregorianTasks subject_GregorianTasks0 = new Subject.GregorianTasks();
      assertEquals((-999999999), Subject.GregorianTasks.MIN_YEAR);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Subject.CharTasks subject_CharTasks0 = new Subject.CharTasks();
      assertEquals('\u0000', Subject.CharTasks.NUL);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = Subject.NumberTasks.compare((byte)0, (byte)6);
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Subject.NumberTasks subject_NumberTasks0 = new Subject.NumberTasks();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("}zFTf0Bc>T]%[n+fXIl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // }zFTf0Bc>T]%[n+fXIl is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }
}
