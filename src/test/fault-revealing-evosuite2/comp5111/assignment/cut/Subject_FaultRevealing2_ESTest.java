/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 07:15:34 GMT 2023
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

// @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Subject_FaultRevealing2_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate(999999999, (-1574), 999999999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: -1574
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate((-999999999), 393, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: 393
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getLengthOfMonth(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: 0
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear((-4));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, object0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = Subject.CharTasks.compare('\r', '(');
      assertEquals((-27), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiAlpha('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiPrintable(' ');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = Subject.NumberTasks.compare((byte)0, (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable("*G5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable("yH=RedGWro9>T]$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigInteger("(h1xrZ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(h1xrZ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("'U9`:RWRMCJ4sW3W;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 'U9`:RWRMCJ4sW3W; is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Subject.StringTasks.replace("0-dlRBIoFRJ]4zV5", "0-dlRBIoFRJ]4zV5", "0-dlRBIoFRJ]4zV5");
      assertEquals("0-dlRBIoFRJ]4zV5", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Subject.StringTasks.stripEnd("Wi", (String) null);
      assertEquals("Wi", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) "", (CharSequence) "comp5111.assignment.cut.Subject$BooleanTasks");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Subject.StringTasks.chop("co");
      assertEquals("c", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isSeparator('y');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isSeparator('&');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Subject.FilenameTasks.getName("\"dm!Wgub_5^2");
      assertEquals("\"dm!Wgub_5^2", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.flipSeparator('*');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // *
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = Subject.ArrayTasks.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiAlphaUpper('-');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = Subject.ArrayTasks.isEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek(2681, 2681, 27);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: 2681
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek(47, 122, 47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day out of range: 47
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek(0, 1, (-3263));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day out of range: -3263
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate(6, 6, 3920);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DAY_OF_MONTH out of range: 3920
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getLengthOfMonth(0, 11);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Subject.GregorianTasks.checkDate(4, 12, 12);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getLengthOfMonth(1677, 5);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getLengthOfMonth((-1), 9);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getLengthOfMonth((-1), 1);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear((-2397));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear(3500);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear(1068);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, object0, 1068);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("");
      Object object0 = new Object();
      int int0 = Subject.ArrayTasks.lastIndexOf(stringArray0, object0, 0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ":5yOu\"h }b*0B'%?";
      objectArray0[1] = (Object) ":5yOu\"h }b*0B'%?";
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, (Object) null, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'M';
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, objectArray0[0], 1068);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, (Object) null, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Integer integer0 = new Integer((-1871));
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, integer0, (-1871));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = new Integer((-809));
      int int0 = Subject.ArrayTasks.lastIndexOf((Object[]) null, integer0, 2929);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiAlphaLower('~');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiAlpha('4');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiAlpha('F');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiControl('\"');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiPrintable('');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiPrintable('\u0000');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAscii('%');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAscii('\u0087');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Character character0 = Character.valueOf('%');
      char char0 = Subject.CharTasks.toChar(character0, '%');
      assertEquals('%', char0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char char0 = Subject.CharTasks.toChar((Character) null, 'J');
      assertEquals('J', char0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = Subject.BooleanTasks.compare(true, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = Subject.BooleanTasks.compare(true, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = Subject.BooleanTasks.compare(false, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable("-{IBJBonXM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable("0xy5 [>Jh&x)1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigDecimal bigDecimal0 = Subject.NumberTasks.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigInteger("0GqpG-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigInteger("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // An empty string is not a valid number
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = Subject.NumberTasks.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long long0 = Subject.NumberTasks.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = Subject.NumberTasks.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Double double0 = Subject.NumberTasks.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Float float0 = Subject.NumberTasks.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("U/l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // U/l is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("}|J:m-;*7Ty=lF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // }|J:m-;*7Ty=lF is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber(":]xcE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // :]xcE is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("An empty string is not a valid number");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // An empty string is not a valid number is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("comp5111.assignment.cut.Subject$FilenameTasks");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // comp5111.assignment.cut.Subject$FilenameTasks is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("y5 [>Jh&x)1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"y5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("#xB");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"xB\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("0x9aFTa1*AAD,J'u");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9aFTa1*AAD,J'u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("0Xcomp5111.assignment.cut.Subject$FilenameTask");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"co\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Number number0 = Subject.NumberTasks.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringTasks.replace("o", "", "eDy+H");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Subject.StringTasks.replace("", (String) null, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Subject.StringTasks.replace("", "?", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Subject.StringTasks.replace((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isMixedCase("*G5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isMixedCase("u\"77");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isMixedCase("@iY");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isMixedCase("J");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isMixedCase("E3!HniS{6Lz8:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Subject.StringTasks.stripEnd("u7+s", "J");
      assertEquals("u7+s", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Subject.StringTasks.stripEnd("8tFiu", "");
      assertEquals("8tFiu", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Subject.StringTasks.stripEnd("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) "RhBrDi84$fKYdCx", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) null, (CharSequence) "M");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) "-{IBJBonXM:", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      boolean boolean0 = Subject.StringTasks.containsNone("E3!HniS{6Lz8:", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.containsNone("", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = Subject.StringTasks.containsNone("-{IBJBonXM:", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = Subject.StringTasks.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'T';
      boolean boolean0 = Subject.StringTasks.containsAny("(R?E8?Y2m7rTV6}wW", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.containsAny("8tFiu", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = Subject.StringTasks.containsAny("", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("0-dlRBIoFRJ]4zV5");
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase(" H?O2cZoWe");
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = Subject.StringTasks.splitByCharacterType("UjkCU;c_x`.eqR");
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Subject.StringTasks.chomp("J");
      assertEquals("J", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = Subject.StringTasks.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = Subject.StringTasks.chomp("-{IBJBonXM:");
      assertEquals("-{IBJBonXM:", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = Subject.StringTasks.chop(":");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Subject.StringTasks.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = Subject.StringTasks.chop("E3!HniS{6Lz8:");
      assertEquals("E3!HniS{6Lz8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isEmpty((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = Subject.StringTasks.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = Subject.StringTasks.stripEnd("-{IBJBonXM", "-{IBJBonXM");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("L>6* g2qxPI 4$*8;");
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("4Fz_?r^v{HhD]");
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isRFC3986HostName("-{IBJBonXM:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isRFC3986HostName("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isRFC3986HostName("0X");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("czqgO@uW79.W<kw[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("E3!HniS{6Lz8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("-{IBJBonXM:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address(":5yOu\"h }b*0B'%?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv4Address("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = Subject.FilenameTasks.indexOfLastSeparator((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Subject.FilenameTasks.getName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char char0 = Subject.FilenameTasks.flipSeparator('\\');
      assertEquals('/', char0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.flipSeparator('\u0087');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u0087
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Subject subject0 = new Subject();
      // Undeclared exception!
      try { 
        Subject.ArrayTasks.getLength(subject0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Subject.BooleanTasks subject_BooleanTasks0 = new Subject.BooleanTasks();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = Subject.StringTasks.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Subject.StringTasks subject_StringTasks0 = new Subject.StringTasks();
      assertEquals((-1), Subject.StringTasks.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Subject.FilenameTasks subject_FilenameTasks0 = new Subject.FilenameTasks();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = Subject.ArrayTasks.isEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Subject.ArrayTasks subject_ArrayTasks0 = new Subject.ArrayTasks();
      assertEquals((-1), Subject.ArrayTasks.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = Subject.StringTasks.containsAny("9aFTa1*AAD,J'u", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Subject.GregorianTasks subject_GregorianTasks0 = new Subject.GregorianTasks();
      assertEquals((-999999999), Subject.GregorianTasks.MIN_YEAR);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Subject.CharTasks subject_CharTasks0 = new Subject.CharTasks();
      assertEquals('\r', Subject.CharTasks.CR);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = Subject.NumberTasks.compare((byte) (-74), (byte) (-74));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0150() throws Throwable {
      boolean boolean1 = comp5111.assignment.cut.Subject.NumberTasks.isDigits("!");
      org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isDigits("9aFTa1*AAD,J'u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Subject.NumberTasks subject_NumberTasks0 = new Subject.NumberTasks();
  }
}
