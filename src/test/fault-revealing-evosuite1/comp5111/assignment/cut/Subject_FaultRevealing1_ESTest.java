/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 07:10:29 GMT 2023
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

// @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Subject_FaultRevealing1_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv4Address("#32^Gy)sUIc");
      assertFalse(boolean0);
      
      char char0 = '<';
      boolean boolean1 = Subject.CharTasks.isAsciiAlphaUpper('<');
      assertFalse(boolean1);
      
      String string0 = "0";
      BigInteger bigInteger0 = Subject.NumberTasks.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      boolean boolean2 = Subject.StringTasks.isEmpty("0");
      assertFalse(boolean2);
      
      String string1 = "\\/:";
      boolean boolean3 = Subject.FilenameTasks.isRFC3986HostName("/:");
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("#32^Gy)sUIc");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"32^Gy)sUIc\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isRFC3986HostName(".");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getLengthOfMonth((-2907), (-2907));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: -2907
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = 12;
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate((-1783), 12, (-1783));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DAY_OF_MONTH out of range: -1783
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable("\"?0~d%4.;Ehkm");
      assertFalse(boolean0);
      
      Subject.GregorianTasks.checkDate(10, 10, 10);
      boolean boolean1 = Subject.CharTasks.isAscii('l');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = Subject.StringTasks.isBlank("\"?0~d%4.;Ehkm");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = Subject.StringTasks.isMixedCase("\"?0~d%4.;Ehkm");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "32^Gy)sUIc";
      boolean boolean0 = Subject.NumberTasks.isDigits("32^Gy)sUIc");
      assertFalse(boolean0);
      
      int int0 = Subject.GregorianTasks.MIN_YEAR;
      assertEquals((-999999999), int0);
      
      boolean boolean1 = Subject.FilenameTasks.isIPv6Address("3p^Gy)sUIc");
      assertFalse(boolean1);
      
      String string1 = Subject.FilenameTasks.getName("32^Gy)sUIc");
      assertTrue(string1.equals((Object)string0));
      assertEquals("32^Gy)sUIc", string1);
      assertNotNull(string1);
      
      boolean boolean2 = Subject.StringTasks.equals((CharSequence) "32^Gy)sUIc", (CharSequence) "32^Gy)sUIc");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string2 = Subject.StringTasks.stripEnd("32^Gy)sUIc", "32^Gy)sUIc");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate((-999999999), (-999999999), (-999999999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: -999999999
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear(2100);
      assertFalse(boolean0);
      
      boolean boolean1 = Subject.CharTasks.isAsciiAlphaUpper('c');
      assertFalse(boolean1);
      
      String string0 = Subject.StringTasks.stripEnd("{kP4>UIFe(GMeqd?", "{kP4>UIFe(GMeqd?");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = Subject.StringTasks.chop("{kP4>UIFe(GMeqd?");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{kP4>UIFe(GMeqd", string1);
      assertNotNull(string1);
      
      String string2 = Subject.StringTasks.replace("0XD*bpwJx=h3uGr!", "comp5111.assignment.cut.Subject$CharTasks", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0XD*bpwJx=h3uGr!", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      boolean boolean0 = Subject.StringTasks.isMixedCase("Q6.");
      assertFalse(boolean0);
      
      objectArray0[3] = (Object) "Q6.";
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[4] = object2;
      objectArray0[5] = (Object) "Q6.";
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[7] = object3;
      Integer integer0 = new Integer(9);
      assertEquals(9, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, integer0, 9);
      assertEquals((-1), int0);
      assertEquals(9, objectArray0.length);
      
      boolean boolean1 = Subject.CharTasks.isAsciiAlphaLower('\'');
      assertFalse(boolean1);
      
      boolean boolean2 = Subject.CharTasks.isAsciiPrintable('h');
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      char[] charArray0 = new char[0];
      String string0 = Subject.StringTasks.chop("Q6.");
      assertEquals("Q6", string0);
      assertNotNull(string0);
      
      boolean boolean3 = Subject.StringTasks.containsNone("Q6", charArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean3);
      assertEquals(0, charArray0.length);
      
      String string1 = Subject.StringTasks.stripEnd("t@\"j$cSG/9dD\"", "t@\"j$cSG/9dD\"");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Subject.StringTasks.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      Integer integer0 = Subject.NumberTasks.createInteger((String) null);
      assertNull(integer0);
      
      boolean boolean0 = Subject.FilenameTasks.isSeparator('W');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = '+';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      charArray0[6] = 'W';
      charArray0[7] = 'v';
      boolean boolean1 = Subject.StringTasks.containsAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'v', '+', 'W', 'W', 'W', 'W', 'W', 'v'}, charArray0);
      assertFalse(boolean1);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "+";
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      boolean boolean0 = Subject.StringTasks.containsNone("+", charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigInteger("+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "0";
      boolean boolean0 = Subject.NumberTasks.isDigits("0");
      assertTrue(boolean0);
      
      int int0 = Subject.BooleanTasks.compare(true, false);
      assertEquals(1, int0);
      
      boolean boolean1 = Subject.FilenameTasks.isIPv6Address("0");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Subject.FilenameTasks.getName("0");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0", string1);
      assertNotNull(string1);
      
      boolean boolean2 = Subject.StringTasks.equals((CharSequence) "0", (CharSequence) "0");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterType("0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string2 = Subject.StringTasks.chop("0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Subject.GregorianTasks.checkDate(19, 1, 1);
      String[] stringArray1 = Subject.StringTasks.splitByCharacterTypeCamelCase("0");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = "[<(dH$";
      String[] stringArray2 = Subject.FilenameTasks.splitOnTokens("[<(dH$");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      Number number0 = Subject.NumberTasks.createNumber("0");
      assertFalse(number0.equals((Object)int0));
      assertEquals(0, number0);
      assertNotNull(number0);
      
      String string4 = Subject.StringTasks.stripEnd("0", "");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("0", string4);
      assertNotNull(string4);
      
      byte byte0 = (byte)0;
      int int1 = Subject.NumberTasks.compare((byte)0, (byte)0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        Subject.ArrayTasks.getLength("0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear(3063);
      assertFalse(boolean0);
      
      String string0 = Subject.StringTasks.replace("?", "0>4'X=h4N0", "?");
      assertEquals("?", string0);
      assertNotNull(string0);
      
      boolean boolean1 = Subject.CharTasks.isAsciiAlphaLower('a');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "?";
      objectArray0[1] = (Object) "0>4'X=h4N0";
      objectArray0[2] = (Object) "?";
      objectArray0[2] = (Object) "?";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "?";
      objectArray0[6] = (Object) "?";
      objectArray0[7] = (Object) "?";
      objectArray0[8] = (Object) "0>4'X=h4N0";
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, objectArray0[7], 3063);
      assertEquals(7, int0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiPrintable('n');
      assertTrue(boolean0);
      
      boolean boolean1 = Subject.CharTasks.isAsciiControl('(');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Subject.StringTasks.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean2 = Subject.StringTasks.isEmpty("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string1 = Subject.StringTasks.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean3 = Subject.FilenameTasks.isRFC3986HostName("0x");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      char[] charArray0 = new char[0];
      boolean boolean4 = Subject.StringTasks.containsAny("0x", charArray0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean4);
      assertEquals(0, charArray0.length);
      
      boolean boolean5 = Subject.FilenameTasks.isRFC3986HostName("PE[lI#{e9Jpv\"ga");
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Subject.StringTasks.chomp(":comp5111.assignment.cut.Subject$GregrianTasks");
      assertEquals(":comp5111.assignment.cut.Subject$GregrianTasks", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '<';
      charArray0[2] = '~';
      charArray0[3] = 'L';
      boolean boolean0 = Subject.StringTasks.containsNone(":comp5111.assignment.cut.Subject$GregrianTasks", charArray0);
      assertArrayEquals(new char[] {'@', '<', '~', 'L'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = Subject.CharTasks.isAsciiAlphaUpper('@');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Subject.StringTasks.replace("GwtH", ":comp5111.assignment.cut.Subject$GregrianTasks", ":comp5111.assignment.cut.Subject$GregrianTasks");
      assertFalse(string1.equals((Object)string0));
      assertEquals("GwtH", string1);
      assertNotNull(string1);
      
      boolean boolean2 = Subject.NumberTasks.isParsable(":comp5111.assignment.cut.Subject$GregrianTasks");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = Subject.StringTasks.chop("0x");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0", string2);
      assertNotNull(string2);
      
      boolean boolean3 = Subject.FilenameTasks.isIPv6Address("0x");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string3 = Subject.StringTasks.chomp("comp5111.assignment.cut.Subject$FilenameTasks");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("comp5111.assignment.cut.Subject$FilenameTasks", string3);
      assertNotNull(string3);
      
      String string4 = Subject.StringTasks.EMPTY;
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean4 = Subject.StringTasks.isNumeric("");
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      boolean boolean5 = Subject.FilenameTasks.isIPv6Address(":comp5111.assignment.cut.Subject$GregrianTasks");
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5);
      
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate(10, 1444, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: 1444
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear(3063);
      assertFalse(boolean0);
      
      String string0 = Subject.StringTasks.replace("?", "0>4'X=h4N0", "?");
      assertEquals("?", string0);
      assertNotNull(string0);
      
      boolean boolean1 = Subject.CharTasks.isAsciiAlphaLower('t');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "?";
      objectArray0[1] = (Object) "0>4'X=h4N0";
      objectArray0[2] = (Object) "?";
      objectArray0[3] = (Object) "?";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "?";
      objectArray0[6] = (Object) "?";
      objectArray0[7] = (Object) "?";
      objectArray0[8] = (Object) "0>4'X=h4N0";
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, objectArray0[7], 3063);
      assertEquals(7, int0);
      assertEquals(9, objectArray0.length);
      
      boolean boolean2 = Subject.CharTasks.isAsciiControl('t');
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = Subject.StringTasks.isMixedCase("?");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = null;
      String string1 = Subject.StringTasks.chop((String) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek((-209), (-209), (-209));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day out of range: -209
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("2o};pvr@jbtzg><");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer(65535);
      assertEquals(65535, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, integer0, 8);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = Subject.FilenameTasks.isIPv6Address("Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it:");
      assertFalse(boolean1);
      
      boolean boolean2 = Subject.StringTasks.isEmpty("Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it:");
      assertFalse(boolean2);
      
      boolean boolean3 = Subject.GregorianTasks.isLeapYear((-1944));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'H';
      charArray0[2] = '/';
      charArray0[3] = 'm';
      charArray0[4] = 'E';
      charArray0[5] = '|';
      charArray0[6] = 'p';
      boolean boolean4 = Subject.StringTasks.containsNone("2o};pvr@jbtzg><", charArray0);
      assertFalse(boolean4 == boolean3);
      assertArrayEquals(new char[] {'9', 'H', '/', 'm', 'E', '|', 'p'}, charArray0);
      assertFalse(boolean4);
      assertEquals(7, charArray0.length);
      
      boolean boolean5 = Subject.FilenameTasks.isIPv6Address("0>4'X=h4N0");
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5);
      
      boolean boolean6 = Subject.CharTasks.isAsciiPrintable('U');
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Subject.StringTasks.chop(")k/7`;4AJGP2");
      assertEquals(")k/7`;4AJGP", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = 'w';
      charArray0[3] = 'h';
      charArray0[4] = 'r';
      charArray0[5] = 'J';
      charArray0[6] = 'e';
      charArray0[7] = 'D';
      charArray0[8] = 'u';
      boolean boolean0 = Subject.StringTasks.containsNone(")k/7`;4AJGP", charArray0);
      assertArrayEquals(new char[] {'$', '$', 'w', 'h', 'r', 'J', 'e', 'D', 'u'}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      boolean boolean1 = Subject.NumberTasks.isParsable(")k/7`;4AJGP2");
      assertFalse(boolean1);
      
      boolean boolean2 = Subject.CharTasks.isAsciiAlphaUpper('J');
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("p");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // p is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = Subject.StringTasks.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Subject.StringTasks.isMixedCase("");
      assertFalse(boolean0);
      
      String string1 = Subject.StringTasks.chomp("nY");
      assertFalse(string1.equals((Object)string0));
      assertEquals("nY", string1);
      assertNotNull(string1);
      
      String string2 = Subject.StringTasks.replace("", "", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = Subject.CharTasks.isAsciiPrintable(' ');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "nY";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) null;
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, (Object) null, 719);
      assertEquals(3, int0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Subject.StringTasks.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Subject.StringTasks.isNumeric("");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[8] = object0;
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, (Object) null, 1760);
      assertEquals((-1), int0);
      assertEquals(9, objectArray0.length);
      
      char char0 = '7';
      boolean boolean1 = Subject.CharTasks.isAsciiControl('7');
      assertFalse(boolean1);
      
      String string1 = Subject.StringTasks.chomp("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Subject.StringTasks.replace("P8", "z>U-e$/RmD", "z>U-e$/RmD");
      assertEquals("P8", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Subject.CharTasks.isAsciiControl('j');
      assertFalse(boolean0);
      
      boolean boolean1 = Subject.NumberTasks.isParsable("]u");
      assertFalse(boolean1);
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      CharBuffer charBuffer0 = CharBuffer.allocate('j');
      assertEquals(106, charBuffer0.remaining());
      assertEquals(106, charBuffer0.capacity());
      assertEquals(106, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(106, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      boolean boolean2 = Subject.StringTasks.isMixedCase(charBuffer0);
      assertEquals(106, charBuffer0.remaining());
      assertEquals(106, charBuffer0.capacity());
      assertEquals(106, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(106, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getLengthOfMonth(5, 5);
      assertEquals(31, int0);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("comp5111.assignment.cut.Subject$FilenameTasks");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // comp5111.assignment.cut.Subject$FilenameTasks is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "=qDmI8&X6&=5\\:pd";
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("=qDmI8&X6&=5:pd");
      assertFalse(boolean0);
      
      boolean boolean1 = Subject.CharTasks.isAsciiControl('?');
      assertFalse(boolean1);
      
      boolean boolean2 = Subject.CharTasks.isAsciiAlphaLower('?');
      assertFalse(boolean2);
      
      String string1 = "wE3=VtK|p";
      boolean boolean3 = Subject.FilenameTasks.isIPv4Address("wE3=VtK|p");
      assertFalse(boolean3);
      
      int int0 = Subject.GregorianTasks.getLengthOfMonth(6, 6);
      assertEquals(30, int0);
      
      boolean boolean4 = Subject.GregorianTasks.isLeapYear(255);
      assertFalse(boolean4);
      
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate(6, (-80016506), (-80016506));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: -80016506
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "0xcomp5111.assignment.cut.Subject$NumberTask";
      boolean boolean0 = Subject.NumberTasks.isDigits("0xcomp5111.assignment.cut.Subject$NumberTask");
      assertFalse(boolean0);
      
      int int0 = Subject.BooleanTasks.compare(true, false);
      assertEquals(1, int0);
      
      boolean boolean1 = Subject.FilenameTasks.isIPv6Address("0xcomp5111.assignment.cut.Subject$NumberTask");
      assertFalse(boolean1);
      
      String string1 = Subject.FilenameTasks.getName("0xcomp5111.assignment.cut.Subject$NumberTask");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0xcomp5111.assignment.cut.Subject$NumberTask", string1);
      assertNotNull(string1);
      
      boolean boolean2 = Subject.StringTasks.equals((CharSequence) "0xcomp5111.assignment.cut.Subject$NumberTask", (CharSequence) "0xcomp5111.assignment.cut.Subject$NumberTask");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterType("0xcomp5111.assignment.cut.Subject$NumberTask");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string2 = Subject.StringTasks.stripEnd("0xcomp5111.assignment.cut.Subject$NumberTask", "0xcomp5111.assignment.cut.Subject$NumberTask");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Subject.GregorianTasks.checkDate(19, 1, 1);
      String[] stringArray1 = Subject.StringTasks.splitByCharacterTypeCamelCase("0xcomp5111.assignment.cut.Subject$NumberTask");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(12, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = "[<(dH$";
      String[] stringArray2 = Subject.FilenameTasks.splitOnTokens("[<(dH$");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = Subject.FilenameTasks.splitOnTokens("");
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("0xcomp5111.assignment.cut.Subject$NumberTask");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"comp511\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, object1, 45);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      charArray0[1] = 'D';
      charArray0[2] = 'n';
      charArray0[3] = '';
      charArray0[4] = 'q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(5, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.capacity());
      assertEquals("UDnq", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertArrayEquals(new char[] {'U', 'D', 'n', '', 'q'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertEquals(5, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.capacity());
      assertEquals("UDnq", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(5, charBuffer1.length());
      assertEquals(5, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(5, charBuffer1.limit());
      assertEquals(5, charBuffer1.capacity());
      assertEquals("UDnq", charBuffer1.toString());
      assertTrue(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'U', 'D', 'n', '', 'q'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(charBuffer1);
      
      boolean boolean0 = Subject.StringTasks.containsAny(charBuffer1, charArray0);
      assertEquals(5, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.capacity());
      assertEquals("UDnq", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(5, charBuffer1.length());
      assertEquals(5, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(5, charBuffer1.limit());
      assertEquals(5, charBuffer1.capacity());
      assertEquals("UDnq", charBuffer1.toString());
      assertTrue(charBuffer1.isReadOnly());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'U', 'D', 'n', '', 'q'}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      
      boolean boolean1 = Subject.StringTasks.isNumeric(charBuffer0);
      assertEquals(5, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.capacity());
      assertEquals("UDnq", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'U', 'D', 'n', '', 'q'}, charArray0);
      assertFalse(boolean1);
      assertEquals(5, charArray0.length);
      
      CharBuffer charBuffer2 = charBuffer0.get(charArray0);
      assertEquals(0, charBuffer2.remaining());
      assertEquals(5, charBuffer2.position());
      assertEquals(5, charBuffer2.limit());
      assertEquals(0, charBuffer2.arrayOffset());
      assertFalse(charBuffer2.isReadOnly());
      assertTrue(charBuffer2.hasArray());
      assertEquals(5, charBuffer2.capacity());
      assertEquals(0, charBuffer2.length());
      assertFalse(charBuffer2.isDirect());
      assertEquals("", charBuffer2.toString());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertSame(charBuffer2, charBuffer0);
      assertSame(charBuffer0, charBuffer2);
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertArrayEquals(new char[] {'U', 'D', 'n', '', 'q'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(charBuffer2);
      
      CharBuffer charBuffer3 = CharBuffer.wrap(charArray0);
      assertEquals(5, charBuffer3.length());
      assertTrue(charBuffer3.hasRemaining());
      assertEquals(5, charBuffer3.capacity());
      assertEquals("UDnq", charBuffer3.toString());
      assertTrue(charBuffer3.hasArray());
      assertEquals(5, charBuffer3.limit());
      assertEquals(0, charBuffer3.arrayOffset());
      assertFalse(charBuffer3.isReadOnly());
      assertEquals(5, charBuffer3.remaining());
      assertFalse(charBuffer3.isDirect());
      assertEquals(0, charBuffer3.position());
      assertNotSame(charBuffer3, charBuffer0);
      assertNotSame(charBuffer3, charBuffer2);
      assertFalse(charBuffer3.equals((Object)charBuffer0));
      assertFalse(charBuffer3.equals((Object)charBuffer2));
      assertArrayEquals(new char[] {'U', 'D', 'n', '', 'q'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(charBuffer3);
      
      boolean boolean2 = Subject.FilenameTasks.isRFC3986HostName("x");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("x");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        Subject.StringTasks.containsAny(charBuffer1, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Subject.FilenameTasks subject_FilenameTasks0 = new Subject.FilenameTasks();
      assertNotNull(subject_FilenameTasks0);
      
      Character character0 = Character.valueOf('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      char char0 = Subject.CharTasks.toChar(character0, 'o');
      assertEquals('Z', char0);
      
      boolean boolean0 = Subject.FilenameTasks.isSeparator('Z');
      assertFalse(boolean0);
      
      boolean boolean1 = Subject.NumberTasks.isParsable((String) null);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      boolean boolean2 = Subject.StringTasks.containsNone((CharSequence) null, charArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z'}, charArray0);
      assertTrue(boolean2);
      assertEquals(4, charArray0.length);
      
      Float float0 = Subject.NumberTasks.createFloat((String) null);
      assertNull(float0);
      
      boolean boolean3 = Subject.StringTasks.equals((CharSequence) null, (CharSequence) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAscii('g');
      assertTrue(boolean0);
      
      String string0 = "f_fE$R";
      String string1 = null;
      String string2 = Subject.StringTasks.replace("f_fE$R", (String) null, (String) null);
      assertTrue(string2.equals((Object)string0));
      assertEquals("f_fE$R", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = 'g';
      charArray0[7] = 'g';
      boolean boolean1 = Subject.StringTasks.containsNone("f_fE$R", charArray0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g'}, charArray0);
      assertTrue(boolean1);
      assertEquals(8, charArray0.length);
      
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.flipSeparator('g');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // g
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "";
      String string1 = ":hR&Pz`pU0K d=QL";
      String string2 = Subject.StringTasks.replace("", ":hR&Pz`pU0K d=QL", ":hR&Pz`pU0K d=QL");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber(":hR&Pz`pU0K d=QL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // :hR&Pz`pU0K d=QL is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "32{M^Gy)sU*c";
      boolean boolean0 = Subject.NumberTasks.isDigits("32{M^Gy)sU*c");
      assertFalse(boolean0);
      
      int int0 = Subject.BooleanTasks.compare(true, false);
      assertEquals(1, int0);
      
      boolean boolean1 = Subject.FilenameTasks.isIPv6Address("32{M^Gy)sU*c");
      assertFalse(boolean1);
      
      String string1 = Subject.FilenameTasks.getName("32{M^Gy)sU*c");
      assertTrue(string1.equals((Object)string0));
      assertEquals("32{M^Gy)sU*c", string1);
      assertNotNull(string1);
      
      boolean boolean2 = Subject.StringTasks.equals((CharSequence) "32{M^Gy)sU*c", (CharSequence) "32{M^Gy)sU*c");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("32{M^Gy)sU*c");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string2 = Subject.StringTasks.stripEnd("32{M^Gy)sU*c", "32{M^Gy)sU*c");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Subject.GregorianTasks.checkDate(19, 1, 1);
      String[] stringArray1 = Subject.StringTasks.splitByCharacterTypeCamelCase("32{M^Gy)sU*c");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(10, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = "[<(dH$";
      String[] stringArray2 = Subject.FilenameTasks.splitOnTokens("[<(dH$");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = Subject.FilenameTasks.splitOnTokens("");
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("32{M^Gy)sU*c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 32{M^Gy)sU*c is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = Subject.StringTasks.chop(" KD|_k8");
      assertEquals(" KD|_k", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Subject.FilenameTasks.isIPv4Address(" KD|_k");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("0xv1b?d*jRE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"v1b?d*jRE\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = 'd';
      charArray0[2] = '\\';
      charArray0[3] = 'y';
      charArray0[4] = '';
      charArray0[5] = 'N';
      charArray0[6] = '$';
      charArray0[7] = 'x';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("#d\\yN$x", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertArrayEquals(new char[] {'#', 'd', '\\', 'y', '', 'N', '$', 'x'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.rewind();
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("#d\\yN$x", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals("#d\\yN$x", charBuffer1.toString());
      assertEquals(8, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(8, charBuffer1.remaining());
      assertEquals(8, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertEquals(8, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'#', 'd', '\\', 'y', '', 'N', '$', 'x'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charBuffer1);
      
      boolean boolean0 = Subject.StringTasks.containsNone(charBuffer0, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("#d\\yN$x", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertSame(charBuffer0, charBuffer1);
      assertArrayEquals(new char[] {'#', 'd', '\\', 'y', '', 'N', '$', 'x'}, charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      
      boolean boolean1 = Subject.CharTasks.isAsciiAlpha('$');
      assertFalse(boolean1);
      
      boolean boolean2 = Subject.CharTasks.isAsciiAlphaLower('z');
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = Subject.FilenameTasks.isRFC3986HostName("Mz]qD'b{20j");
      assertFalse(boolean0);
      
      Subject.GregorianTasks.checkDate((-209), 1, 1);
      char char0 = 'b';
      boolean boolean1 = Subject.CharTasks.isAsciiAlphaUpper('b');
      assertFalse(boolean1);
      
      boolean boolean2 = Subject.CharTasks.isAsciiPrintable('b');
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = Subject.CharTasks.isAsciiAlphaLower('b');
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string0 = Subject.StringTasks.chomp("0{F@S{?z]%8 X2");
      assertEquals("0{F@S{?z]%8 X2", string0);
      assertNotNull(string0);
      
      String string1 = Subject.StringTasks.replace("Mz]qD'b{20j", "0x:", "0x:");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Mz]qD'b{20j", string1);
      assertNotNull(string1);
      
      boolean boolean4 = Subject.FilenameTasks.isIPv6Address("I~A4mU:2dVw");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string2 = Subject.StringTasks.chomp("I~A4mU:2dVw");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("I~A4mU:2dVw", string2);
      assertNotNull(string2);
      
      boolean boolean5 = Subject.FilenameTasks.isIPv6Address("I~A4mU:2dVw");
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5);
      
      char char1 = 'J';
      boolean boolean6 = Subject.CharTasks.isAsciiPrintable('J');
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6);
      
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate((-209), (-209), 24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: -209
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Subject.StringTasks.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Subject.StringTasks.containsNone("", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "32M^Gy)sU*c";
      boolean boolean0 = Subject.NumberTasks.isDigits("32M^Gy)sU*c");
      assertFalse(boolean0);
      
      int int0 = Subject.BooleanTasks.compare(true, false);
      assertEquals(1, int0);
      
      boolean boolean1 = Subject.FilenameTasks.isIPv6Address("32M^Gy)sU*c");
      assertFalse(boolean1);
      
      String string1 = Subject.FilenameTasks.getName("32M^Gy)sU*c");
      assertTrue(string1.equals((Object)string0));
      assertEquals("32M^Gy)sU*c", string1);
      assertNotNull(string1);
      
      boolean boolean2 = Subject.StringTasks.equals((CharSequence) "32M^Gy)sU*c", (CharSequence) "32M^Gy)sU*c");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterType("32M^Gy)sU*c");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string2 = Subject.StringTasks.stripEnd("32M^Gy)sU*c", "32M^Gy)sU*c");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Subject.GregorianTasks.checkDate(19, 1, 1);
      String[] stringArray1 = Subject.StringTasks.splitByCharacterTypeCamelCase("32M^Gy)sU*c");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = "[<(dH$";
      String[] stringArray2 = Subject.FilenameTasks.splitOnTokens("[<(dH$");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = Subject.FilenameTasks.splitOnTokens("");
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("32M^Gy)sU*c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 32M^Gy)sU*c is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "Dmie2s";
      String string1 = Subject.StringTasks.chop("Dmie2s");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Dmie2", string1);
      assertNotNull(string1);
      
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) null, (CharSequence) "Dmie2");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.isIPv4Address((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Subject.NumberTasks subject_NumberTasks0 = new Subject.NumberTasks();
      assertNotNull(subject_NumberTasks0);
      
      int int0 = Subject.GregorianTasks.MIN_YEAR;
      assertEquals((-999999999), int0);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = Subject.FilenameTasks.indexOfLastSeparator("");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = Subject.CharTasks.isAsciiAlpha('7');
      assertFalse(boolean0);
      
      boolean boolean1 = Subject.CharTasks.isAsciiControl('7');
      assertFalse(boolean1);
      
      String string0 = Subject.StringTasks.chomp("b@2fRmc=");
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '7';
      boolean boolean2 = Subject.StringTasks.containsAny("b@2fRmc=", charArray0);
      assertArrayEquals(new char[] {'7', '7'}, charArray0);
      assertFalse(boolean2);
      assertEquals(2, charArray0.length);
      
      boolean boolean3 = Subject.StringTasks.isNumeric("b@2fRmc=");
      assertFalse(boolean3);
      
      int int2 = Subject.FilenameTasks.indexOfLastSeparator((String) null);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber(";j{sAQ*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ;j{sAQ* is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char char0 = ' ';
      boolean boolean0 = Subject.CharTasks.isAscii(' ');
      assertTrue(boolean0);
      
      String string0 = Subject.StringTasks.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = Subject.StringTasks.isMixedCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      boolean boolean2 = Subject.StringTasks.containsNone("", charArray0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {' ', ' ', ' '}, charArray0);
      assertTrue(boolean2);
      assertEquals(3, charArray0.length);
      
      boolean boolean3 = Subject.FilenameTasks.isSeparator(' ');
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = Subject.FilenameTasks.isIPv4Address("$gq2DT4");
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      boolean boolean5 = Subject.StringTasks.equals((CharSequence) "", (CharSequence) "$gq2DT4");
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5);
      
      boolean boolean6 = Subject.FilenameTasks.isRFC3986HostName("`");
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createInteger("$gq2DT4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"$gq2DT4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isDigits("?");
      assertFalse(boolean0);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("?");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char char0 = Subject.CharTasks.CR;
      assertEquals('\r', char0);
      
      String string0 = null;
      String string1 = Subject.FilenameTasks.getName((String) null);
      assertNull(string1);
      
      int int0 = Subject.FilenameTasks.indexOfLastSeparator("?");
      assertEquals((-1), int0);
      
      String[] stringArray1 = Subject.FilenameTasks.splitOnTokens("?");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      BigInteger bigInteger0 = Subject.NumberTasks.createBigInteger((String) null);
      assertNull(bigInteger0);
      
      Subject.CharTasks subject_CharTasks0 = new Subject.CharTasks();
      assertEquals('\n', Subject.CharTasks.LF);
      assertEquals('\u0000', Subject.CharTasks.NUL);
      assertEquals('\r', Subject.CharTasks.CR);
      assertNotNull(subject_CharTasks0);
      
      boolean boolean1 = Subject.CharTasks.isAsciiControl('\r');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Long long0 = Subject.NumberTasks.createLong((String) null);
      assertNull(long0);
      
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getLengthOfMonth(0, 1864);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: 1864
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = Subject.StringTasks.chomp("p");
      assertEquals("p", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Subject.StringTasks.isBlank("p");
      assertFalse(boolean0);
      
      boolean boolean1 = Subject.StringTasks.isNumeric("p");
      assertFalse(boolean1);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("J:6[Np`DOK\".V");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = Subject.StringTasks.stripEnd("", "p");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = Subject.StringTasks.length("");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day out of range: 0
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = Subject.StringTasks.chomp(":comp5111.assignment.cut.Subject$GregorianTasks");
      assertEquals(":comp5111.assignment.cut.Subject$GregorianTasks", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '<';
      charArray0[2] = '~';
      charArray0[3] = 'L';
      boolean boolean0 = Subject.StringTasks.containsNone(":comp5111.assignment.cut.Subject$GregorianTasks", charArray0);
      assertArrayEquals(new char[] {'@', '<', '~', 'L'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = Subject.CharTasks.isAsciiAlphaUpper('p');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Subject.StringTasks.replace("GwtH", ":comp5111.assignment.cut.Subject$GregorianTasks", ":comp5111.assignment.cut.Subject$GregorianTasks");
      assertFalse(string1.equals((Object)string0));
      assertEquals("GwtH", string1);
      assertNotNull(string1);
      
      boolean boolean2 = Subject.StringTasks.isMixedCase(":comp5111.assignment.cut.Subject$GregorianTasks");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = Subject.StringTasks.chop("0x");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0", string2);
      assertNotNull(string2);
      
      boolean boolean3 = Subject.FilenameTasks.isIPv6Address("0x");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string3 = Subject.StringTasks.chomp("comp5111.assignment.cut.Subject$FilenameTasks");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("comp5111.assignment.cut.Subject$FilenameTasks", string3);
      assertNotNull(string3);
      
      String string4 = Subject.StringTasks.EMPTY;
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean4 = Subject.StringTasks.isNumeric("");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      boolean boolean5 = Subject.StringTasks.containsAny("GwtH", charArray0);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertArrayEquals(new char[] {'@', '<', '~', 'L'}, charArray0);
      assertFalse(boolean5);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate(10, 1444, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: 1444
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "comp5111.assignment.cut.Subject$ArrayTasks";
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("comp5111.assignment.cut.Subject$ArrayTasks");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte byte0 = (byte)28;
      int int0 = Subject.NumberTasks.compare((byte)28, (byte)0);
      assertEquals(28, int0);
      
      int int1 = Subject.NumberTasks.compare((byte)0, (byte)13);
      assertFalse(int1 == int0);
      assertEquals((-13), int1);
      
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("comp5111.assignment.cut.Subject$ArrayTasks");
      assertFalse(boolean0);
      
      int int2 = Subject.CharTasks.compare('J', 'J');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      char char0 = 'n';
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.flipSeparator('n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // n
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = Subject.GregorianTasks.getDayOfWeek(9, 9, 9);
      assertEquals(3, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Subject.ArrayTasks.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = Subject.FilenameTasks.isIPv4Address("");
      assertFalse(boolean0);
      
      Long long0 = Subject.NumberTasks.createLong((String) null);
      assertNull(long0);
      
      Subject.CharTasks subject_CharTasks0 = new Subject.CharTasks();
      assertEquals('\r', Subject.CharTasks.CR);
      assertEquals('\u0000', Subject.CharTasks.NUL);
      assertEquals('\n', Subject.CharTasks.LF);
      assertNotNull(subject_CharTasks0);
      
      boolean boolean1 = Subject.FilenameTasks.isIPv4Address("");
      assertFalse(boolean1);
      
      Subject.GregorianTasks subject_GregorianTasks0 = new Subject.GregorianTasks();
      assertEquals((-999999999), Subject.GregorianTasks.MIN_YEAR);
      assertEquals(999999999, Subject.GregorianTasks.MAX_YEAR);
      assertNotNull(subject_GregorianTasks0);
      
      String string1 = ".,G";
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getLengthOfMonth(48, (-999999999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: -999999999
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Subject.StringTasks.chop("comp5111.assignment.cut.Subject$CharTasks");
      assertEquals("comp5111.assignment.cut.Subject$CharTask", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'J';
      charArray0[2] = '';
      charArray0[3] = 'n';
      charArray0[4] = 'H';
      boolean boolean0 = Subject.StringTasks.containsAny("comp5111.assignment.cut.Subject$CharTasks", charArray0);
      assertArrayEquals(new char[] {'[', 'J', '', 'n', 'H'}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      
      String string1 = Subject.StringTasks.chop("comp5111.assignment.cut.Subject$CharTasks");
      assertTrue(string1.equals((Object)string0));
      assertEquals("comp5111.assignment.cut.Subject$CharTask", string1);
      assertNotNull(string1);
      
      boolean boolean1 = Subject.StringTasks.isBlank("comp5111.assignment.cut.Subject$CharTask");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Subject.FilenameTasks.isSeparator('J');
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Subject.BooleanTasks subject_BooleanTasks0 = new Subject.BooleanTasks();
      assertNotNull(subject_BooleanTasks0);
      
      boolean boolean3 = Subject.StringTasks.equals((CharSequence) "comp5111.assignment.cut.Subject$CharTask", (CharSequence) "comp5111.assignment.cut.Subject$CharTask");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string2 = Subject.StringTasks.stripEnd("", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = Subject.StringTasks.length("");
      assertEquals(0, int0);
      
      int int1 = Subject.StringTasks.length("");
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek((-1381), (-243), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day out of range: 0
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Subject.GregorianTasks subject_GregorianTasks0 = new Subject.GregorianTasks();
      assertEquals((-999999999), Subject.GregorianTasks.MIN_YEAR);
      assertEquals(999999999, Subject.GregorianTasks.MAX_YEAR);
      assertNotNull(subject_GregorianTasks0);
      
      String string0 = Subject.StringTasks.chop("xW8r1eM!%+k-mXZK");
      assertEquals("xW8r1eM!%+k-mXZ", string0);
      assertNotNull(string0);
      
      String string1 = Subject.StringTasks.chop("gk");
      assertFalse(string1.equals((Object)string0));
      assertEquals("g", string1);
      assertNotNull(string1);
      
      boolean boolean0 = Subject.CharTasks.isAsciiAlphaLower('{');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      charArray0[5] = '{';
      charArray0[6] = '{';
      charArray0[7] = '{';
      boolean boolean1 = Subject.StringTasks.containsAny("gk", charArray0);
      assertArrayEquals(new char[] {'{', '{', '{', '{', '{', '{', '{', '{'}, charArray0);
      assertFalse(boolean1);
      assertEquals(8, charArray0.length);
      
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.flipSeparator('F');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // F
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = null;
      String string1 = Subject.StringTasks.replace((String) null, (String) null, (String) null);
      assertNull(string1);
      
      int int0 = Subject.NumberTasks.compare((byte)0, (byte)0);
      assertEquals(0, int0);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.splitOnTokens((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isDigits("k\"`s8yx");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean1 = Subject.ArrayTasks.isEmpty(charArray0);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertFalse(boolean1);
      assertEquals(1, charArray0.length);
      
      int int0 = Subject.CharTasks.compare('s', '5');
      assertEquals(62, int0);
      
      int int1 = Subject.BooleanTasks.compare(false, true);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean2 = Subject.FilenameTasks.isIPv4Address("k\"`s8yx");
      assertFalse(boolean2);
      
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("k\"`s8yx");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Subject.StringTasks subject_StringTasks0 = new Subject.StringTasks();
      assertEquals((-1), Subject.StringTasks.INDEX_NOT_FOUND);
      assertNotNull(subject_StringTasks0);
      
      String[] stringArray1 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
      assertNotSame(stringArray3, stringArray0);
      assertSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertEquals(0, stringArray3.length);
      assertNotNull(stringArray3);
      
      int int2 = Subject.BooleanTasks.compare(true, true);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean3 = Subject.CharTasks.isAscii('k');
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      BigDecimal bigDecimal0 = Subject.NumberTasks.createBigDecimal((String) null);
      assertNull(bigDecimal0);
      
      boolean boolean4 = Subject.FilenameTasks.isSeparator('5');
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string0 = Subject.FilenameTasks.getName("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean5 = Subject.CharTasks.isAsciiPrintable('s');
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5);
      
      int int3 = Subject.CharTasks.compare('v', 'K');
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(43, int3);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "o\"&U7)ee,+ThUcBE\"";
      boolean boolean0 = Subject.NumberTasks.isParsable("o\"&U7)ee,+ThUcBE\"");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Subject.CharTasks subject_CharTasks0 = new Subject.CharTasks();
      assertEquals('\u0000', Subject.CharTasks.NUL);
      assertEquals('\n', Subject.CharTasks.LF);
      assertEquals('\r', Subject.CharTasks.CR);
      assertNotNull(subject_CharTasks0);
      
      Subject.StringTasks subject_StringTasks0 = new Subject.StringTasks();
      assertEquals((-1), Subject.StringTasks.INDEX_NOT_FOUND);
      assertNotNull(subject_StringTasks0);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char char0 = Subject.CharTasks.toChar((Character) null, '\u0000');
      assertEquals('\u0000', char0);
      
      String[] stringArray1 = Subject.StringTasks.splitByCharacterType("");
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      Subject.StringTasks subject_StringTasks1 = new Subject.StringTasks();
      assertEquals((-1), Subject.StringTasks.INDEX_NOT_FOUND);
      assertFalse(subject_StringTasks1.equals((Object)subject_StringTasks0));
      assertNotNull(subject_StringTasks1);
      
      String[] stringArray2 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\n';
      charArray0[1] = '\u0000';
      String[] stringArray3 = Subject.StringTasks.splitByCharacterType("");
      assertSame(stringArray3, stringArray0);
      assertSame(stringArray3, stringArray2);
      assertSame(stringArray3, stringArray1);
      assertEquals(0, stringArray3.length);
      assertNotNull(stringArray3);
      
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[4] = '\r';
      boolean boolean0 = Subject.StringTasks.containsAny("", charArray0);
      assertArrayEquals(new char[] {'\n', '\u0000', '\u0000', '\u0000', '\r'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      
      boolean boolean1 = Subject.StringTasks.containsAny("", charArray0);
      assertArrayEquals(new char[] {'\n', '\u0000', '\u0000', '\u0000', '\r'}, charArray0);
      assertFalse(boolean1);
      assertEquals(5, charArray0.length);
      
      int int0 = Subject.BooleanTasks.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean2 = Subject.CharTasks.isAsciiPrintable('\u0000');
      assertFalse(boolean2);
      
      boolean boolean3 = Subject.CharTasks.isAscii('\\');
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean4 = Subject.StringTasks.containsAny("", charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean4 == boolean3);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(boolean4);
      assertEquals(0, charArray1.length);
      
      boolean boolean5 = Subject.CharTasks.isAsciiControl('/');
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Subject.FilenameTasks.getName("oYt0Ggsi=`A:");
      assertEquals("oYt0Ggsi=`A:", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      boolean boolean0 = Subject.StringTasks.containsAny("oYt0Ggsi=`A:", charArray0);
      assertArrayEquals(new char[] {'z'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      String string1 = Subject.StringTasks.replace("oYt0Ggsi=`A:", "oYt0Ggsi=`A:", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Character character0 = Character.valueOf(' ');
      assertEquals(' ', (char)character0);
      assertNotNull(character0);
      
      char char0 = Subject.CharTasks.toChar(character0, 'z');
      assertEquals(' ', char0);
      
      boolean boolean1 = Subject.FilenameTasks.isRFC3986HostName("^[a-zA-Z0-9][a-zA-Z0-9-]*$");
      assertFalse(boolean1);
      
      int int0 = Subject.StringTasks.length("oYt0Ggsi=`A:");
      assertEquals(12, int0);
      
      boolean boolean2 = Subject.CharTasks.isAsciiAlphaLower('5');
      assertFalse(boolean2);
      
      int int1 = Subject.BooleanTasks.compare(false, false);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "32M^Gy)sU*c";
      boolean boolean0 = Subject.NumberTasks.isDigits("32M^Gy)sU*c");
      assertFalse(boolean0);
      
      int int0 = Subject.BooleanTasks.compare(true, true);
      assertEquals(0, int0);
      
      boolean boolean1 = Subject.FilenameTasks.isIPv6Address("32M^Gy)sU*c");
      assertFalse(boolean1);
      
      String string1 = Subject.FilenameTasks.getName("32M^Gy)sU*c");
      assertTrue(string1.equals((Object)string0));
      assertEquals("32M^Gy)sU*c", string1);
      assertNotNull(string1);
      
      boolean boolean2 = Subject.StringTasks.equals((CharSequence) "32M^Gy)sU*c", (CharSequence) "32M^Gy)sU*c");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterType("32M^Gy)sU*c");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string2 = Subject.StringTasks.stripEnd("32M^Gy)sU*c", "32M^Gy)sU*c");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: 0
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Subject.CharTasks subject_CharTasks0 = new Subject.CharTasks();
      assertEquals('\r', Subject.CharTasks.CR);
      assertEquals('\u0000', Subject.CharTasks.NUL);
      assertEquals('\n', Subject.CharTasks.LF);
      assertNotNull(subject_CharTasks0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\r';
      charArray0[1] = '\u0000';
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[4] = '\u0000';
      charArray0[5] = '\r';
      charArray0[6] = '\u0000';
      boolean boolean0 = Subject.ArrayTasks.isEmpty(charArray0);
      assertArrayEquals(new char[] {'\r', '\u0000', '\u0000', '\u0000', '\u0000', '\r', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      
      String string0 = Subject.StringTasks.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = Subject.StringTasks.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Subject.BooleanTasks subject_BooleanTasks0 = new Subject.BooleanTasks();
      assertNotNull(subject_BooleanTasks0);
      
      Subject.StringTasks subject_StringTasks0 = new Subject.StringTasks();
      assertEquals((-1), Subject.StringTasks.INDEX_NOT_FOUND);
      assertNotNull(subject_StringTasks0);
      
      boolean boolean2 = Subject.StringTasks.isEmpty("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = Subject.FilenameTasks.isSeparator('\r');
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = Subject.CharTasks.isAsciiAlphaLower('\u0000');
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string1 = "";
      boolean boolean5 = Subject.FilenameTasks.isRFC3986HostName("");
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = Subject.BooleanTasks.compare(true, true);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      int int1 = Subject.ArrayTasks.lastIndexOf(objectArray0, object0, 4050);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(object0, object3);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object3));
      assertEquals(0, int1);
      assertEquals(4, objectArray0.length);
      
      Subject.StringTasks subject_StringTasks0 = new Subject.StringTasks();
      assertEquals((-1), Subject.StringTasks.INDEX_NOT_FOUND);
      assertNotNull(subject_StringTasks0);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterType("r^tlfh.&ulxT8PHzc");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = Subject.BooleanTasks.compare(true, false);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      String[] stringArray1 = Subject.StringTasks.splitByCharacterType("vb");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = Subject.StringTasks.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char char0 = Subject.FilenameTasks.flipSeparator('/');
      assertEquals('\\', char0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = 'a';
      charArray0[4] = '/';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 67, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Subject.ArrayTasks subject_ArrayTasks0 = new Subject.ArrayTasks();
      assertEquals((-1), Subject.ArrayTasks.INDEX_NOT_FOUND);
      assertNotNull(subject_ArrayTasks0);
      
      String string0 = "";
      boolean boolean0 = Subject.FilenameTasks.isIPv6Address("");
      assertFalse(boolean0);
      
      Subject.FilenameTasks subject_FilenameTasks0 = new Subject.FilenameTasks();
      assertNotNull(subject_FilenameTasks0);
      
      int int0 = Subject.BooleanTasks.compare(true, false);
      assertEquals(1, int0);
      
      String string1 = "An empty string is not a valid number";
      boolean boolean1 = Subject.FilenameTasks.isIPv6Address("An empty string is not a valid number");
      assertFalse(boolean1);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Subject.StringTasks subject_StringTasks0 = new Subject.StringTasks();
      assertEquals((-1), Subject.StringTasks.INDEX_NOT_FOUND);
      assertNotNull(subject_StringTasks0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) subject_StringTasks0;
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      objectArray0[1] = (Object) subject_StringTasks0;
      objectArray0[2] = (Object) subject_StringTasks0;
      objectArray0[3] = (Object) subject_StringTasks0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) subject_StringTasks0;
      objectArray0[6] = (Object) subject_StringTasks0;
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, object0, 1);
      assertEquals((-1), int0);
      assertEquals(7, objectArray0.length);
      
      String string0 = Subject.FilenameTasks.getName("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = Subject.BooleanTasks.compare(false, false);
      assertEquals(0, int0);
      
      Subject.NumberTasks subject_NumberTasks0 = new Subject.NumberTasks();
      assertNotNull(subject_NumberTasks0);
      
      boolean boolean0 = Subject.NumberTasks.isParsable("Qj|Y6@7xa`B8S");
      assertFalse(boolean0);
      
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens(";*t99||YPIIhgwOH");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = Subject.FilenameTasks.indexOfLastSeparator("-{o~!Ev;HSn/");
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      boolean boolean1 = Subject.NumberTasks.isDigits("#");
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigInteger("#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Subject.FilenameTasks.getName("d?e/%Q^[nM");
      assertEquals("%Q^[nM", string0);
      assertNotNull(string0);
      
      String string1 = Subject.StringTasks.replace("", "d?e/%Q^[nM", "0X");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = Subject.CharTasks.isAsciiPrintable('G');
      assertTrue(boolean0);
      
      Subject.StringTasks subject_StringTasks0 = new Subject.StringTasks();
      assertEquals((-1), Subject.StringTasks.INDEX_NOT_FOUND);
      assertNotNull(subject_StringTasks0);
      
      String[] stringArray1 = Subject.StringTasks.splitByCharacterType("(");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
      assertSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
      assertSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertSame(stringArray3, stringArray2);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertEquals(0, stringArray3.length);
      assertNotNull(stringArray3);
      
      String[] stringArray4 = Subject.StringTasks.splitByCharacterTypeCamelCase("0X");
      assertNotSame(stringArray4, stringArray2);
      assertNotSame(stringArray4, stringArray0);
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray1);
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray0));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertEquals(2, stringArray4.length);
      assertNotNull(stringArray4);
      
      String[] stringArray5 = Subject.StringTasks.splitByCharacterTypeCamelCase("bhwY`~P8r");
      assertNotSame(stringArray5, stringArray2);
      assertNotSame(stringArray5, stringArray0);
      assertNotSame(stringArray5, stringArray4);
      assertNotSame(stringArray5, stringArray1);
      assertNotSame(stringArray5, stringArray3);
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray0));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertEquals(7, stringArray5.length);
      assertNotNull(stringArray5);
      
      String[] stringArray6 = Subject.StringTasks.splitByCharacterType("");
      assertNotSame(stringArray6, stringArray1);
      assertSame(stringArray6, stringArray2);
      assertSame(stringArray6, stringArray3);
      assertNotSame(stringArray6, stringArray5);
      assertNotSame(stringArray6, stringArray4);
      assertSame(stringArray6, stringArray0);
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertEquals(0, stringArray6.length);
      assertNotNull(stringArray6);
      
      String[] stringArray7 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
      assertNotSame(stringArray7, stringArray1);
      assertNotSame(stringArray7, stringArray4);
      assertSame(stringArray7, stringArray2);
      assertSame(stringArray7, stringArray6);
      assertSame(stringArray7, stringArray0);
      assertSame(stringArray7, stringArray3);
      assertNotSame(stringArray7, stringArray5);
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray4));
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertEquals(0, stringArray7.length);
      assertNotNull(stringArray7);
      
      String[] stringArray8 = Subject.StringTasks.splitByCharacterTypeCamelCase("0X");
      assertNotSame(stringArray8, stringArray2);
      assertNotSame(stringArray8, stringArray7);
      assertNotSame(stringArray8, stringArray6);
      assertNotSame(stringArray8, stringArray5);
      assertNotSame(stringArray8, stringArray4);
      assertNotSame(stringArray8, stringArray3);
      assertNotSame(stringArray8, stringArray1);
      assertNotSame(stringArray8, stringArray0);
      assertFalse(stringArray8.equals((Object)stringArray2));
      assertFalse(stringArray8.equals((Object)stringArray7));
      assertFalse(stringArray8.equals((Object)stringArray6));
      assertFalse(stringArray8.equals((Object)stringArray5));
      assertFalse(stringArray8.equals((Object)stringArray4));
      assertFalse(stringArray8.equals((Object)stringArray3));
      assertFalse(stringArray8.equals((Object)stringArray1));
      assertFalse(stringArray8.equals((Object)stringArray0));
      assertEquals(2, stringArray8.length);
      assertNotNull(stringArray8);
      
      String[] stringArray9 = Subject.StringTasks.splitByCharacterTypeCamelCase("%Q^[nM");
      assertNotSame(stringArray9, stringArray5);
      assertNotSame(stringArray9, stringArray6);
      assertNotSame(stringArray9, stringArray2);
      assertNotSame(stringArray9, stringArray7);
      assertNotSame(stringArray9, stringArray4);
      assertNotSame(stringArray9, stringArray8);
      assertNotSame(stringArray9, stringArray3);
      assertNotSame(stringArray9, stringArray1);
      assertNotSame(stringArray9, stringArray0);
      assertFalse(stringArray9.equals((Object)stringArray5));
      assertFalse(stringArray9.equals((Object)stringArray6));
      assertFalse(stringArray9.equals((Object)stringArray2));
      assertFalse(stringArray9.equals((Object)stringArray7));
      assertFalse(stringArray9.equals((Object)stringArray4));
      assertFalse(stringArray9.equals((Object)stringArray8));
      assertFalse(stringArray9.equals((Object)stringArray3));
      assertFalse(stringArray9.equals((Object)stringArray1));
      assertFalse(stringArray9.equals((Object)stringArray0));
      assertEquals(6, stringArray9.length);
      assertNotNull(stringArray9);
      
      Subject.GregorianTasks subject_GregorianTasks0 = new Subject.GregorianTasks();
      assertEquals((-999999999), Subject.GregorianTasks.MIN_YEAR);
      assertEquals(999999999, Subject.GregorianTasks.MAX_YEAR);
      assertNotNull(subject_GregorianTasks0);
      
      boolean boolean1 = Subject.StringTasks.isMixedCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Subject.StringTasks.isBlank("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      boolean boolean3 = Subject.StringTasks.containsNone("", charArray0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertTrue(boolean3);
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.flipSeparator('D');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // D
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(1, charBuffer1.capacity());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = 'q';
      charArray0[2] = '8';
      charArray0[3] = '^';
      boolean boolean0 = Subject.StringTasks.containsAny(charBuffer1, charArray0);
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(1, charBuffer1.capacity());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'0', 'q', '8', '^'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiPrintable('R');
      assertTrue(boolean0);
      
      boolean boolean1 = Subject.GregorianTasks.isLeapYear(2657);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = Subject.NumberTasks.compare((byte) (-104), (byte) (-104));
      assertEquals(0, int0);
      
      int int1 = Subject.BooleanTasks.compare(false, false);
      assertEquals(0, int1);
      
      String string0 = Subject.StringTasks.stripEnd("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.flipSeparator('V');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // V
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterType("f7a$J1^S?P>");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = Subject.StringTasks.replace("]o)C'i!1`z$5I", "]o)C'i!1`z$5I", "f7a$J1^S?P>");
      assertEquals("f7a$J1^S?P>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Subject.StringTasks.isMixedCase("f7a$J1^S?P>");
      assertTrue(boolean0);
      
      boolean boolean1 = Subject.FilenameTasks.isIPv4Address("76?EDvDj &^WM]r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'T';
      charArray0[2] = 'D';
      charArray0[3] = '$';
      charArray0[4] = '(';
      charArray0[5] = 'v';
      charArray0[6] = 'N';
      boolean boolean2 = Subject.StringTasks.containsNone("f7a$J1^S?P>", charArray0);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'L', 'T', 'D', '$', '(', 'v', 'N'}, charArray0);
      assertFalse(boolean2);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = Subject.NumberTasks.createBigInteger((String) null);
      assertNull(bigInteger0);
      
      char char0 = '}';
      boolean boolean0 = Subject.CharTasks.isAscii('}');
      assertTrue(boolean0);
      
      char char1 = '<';
      boolean boolean1 = Subject.CharTasks.isAsciiControl('<');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Double double0 = Subject.NumberTasks.createDouble((String) null);
      assertNull(double0);
      
      String string1 = "rq?6";
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createDouble("rq?6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Subject.StringTasks subject_StringTasks0 = new Subject.StringTasks();
      assertEquals((-1), Subject.StringTasks.INDEX_NOT_FOUND);
      assertNotNull(subject_StringTasks0);
      
      String string0 = null;
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = Subject.StringTasks.splitByCharacterTypeCamelCase("[U*i5,L{CI");
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      int[] intArray0 = new int[5];
      String[] stringArray2 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = Subject.StringTasks.splitByCharacterType("[U*i5,L{CI");
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertEquals(9, stringArray3.length);
      assertNotNull(stringArray3);
      
      String[] stringArray4 = Subject.StringTasks.splitByCharacterType("comp5111.assignment.cut.Subject$BooleanTasks");
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray2);
      assertNotSame(stringArray4, stringArray1);
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertEquals(14, stringArray4.length);
      assertNotNull(stringArray4);
      
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      String[] stringArray5 = Subject.StringTasks.splitByCharacterTypeCamelCase("\"g?A?LY;~:oi)\"l;L-.");
      assertNotSame(stringArray5, stringArray2);
      assertNotSame(stringArray5, stringArray1);
      assertNotSame(stringArray5, stringArray4);
      assertNotSame(stringArray5, stringArray3);
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertEquals(17, stringArray5.length);
      assertNotNull(stringArray5);
      
      String[] stringArray6 = Subject.StringTasks.splitByCharacterType("");
      assertNotSame(stringArray6, stringArray1);
      assertSame(stringArray6, stringArray2);
      assertNotSame(stringArray6, stringArray5);
      assertNotSame(stringArray6, stringArray4);
      assertNotSame(stringArray6, stringArray3);
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertEquals(0, stringArray6.length);
      assertNotNull(stringArray6);
      
      intArray0[2] = (-1);
      String[] stringArray7 = Subject.StringTasks.splitByCharacterType("comp5111.assignment.cut.Subject$BooleanTasks");
      assertNotSame(stringArray7, stringArray1);
      assertNotSame(stringArray7, stringArray2);
      assertNotSame(stringArray7, stringArray6);
      assertNotSame(stringArray7, stringArray5);
      assertNotSame(stringArray7, stringArray4);
      assertNotSame(stringArray7, stringArray3);
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray2));
      assertFalse(stringArray7.equals((Object)stringArray6));
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertFalse(stringArray7.equals((Object)stringArray4));
      assertFalse(stringArray7.equals((Object)stringArray3));
      assertEquals(14, stringArray7.length);
      assertNotNull(stringArray7);
      
      String[] stringArray8 = Subject.StringTasks.splitByCharacterTypeCamelCase("AVu}F2\u0006D9xnD09P,<");
      assertNotSame(stringArray8, stringArray4);
      assertNotSame(stringArray8, stringArray2);
      assertNotSame(stringArray8, stringArray1);
      assertNotSame(stringArray8, stringArray5);
      assertNotSame(stringArray8, stringArray6);
      assertNotSame(stringArray8, stringArray7);
      assertNotSame(stringArray8, stringArray3);
      assertFalse(stringArray8.equals((Object)stringArray4));
      assertFalse(stringArray8.equals((Object)stringArray2));
      assertFalse(stringArray8.equals((Object)stringArray1));
      assertFalse(stringArray8.equals((Object)stringArray5));
      assertFalse(stringArray8.equals((Object)stringArray6));
      assertFalse(stringArray8.equals((Object)stringArray7));
      assertFalse(stringArray8.equals((Object)stringArray3));
      assertEquals(14, stringArray8.length);
      assertNotNull(stringArray8);
      
      String[] stringArray9 = Subject.StringTasks.splitByCharacterType((String) null);
      assertNull(stringArray9);
      
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      boolean boolean0 = Subject.ArrayTasks.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      
      char char0 = 'H';
      boolean boolean1 = Subject.CharTasks.isAsciiAlpha('H');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = Subject.NumberTasks.compare((byte) (-59), (byte) (-59));
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.isIPv4Address((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = Subject.StringTasks.isMixedCase((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char char0 = 'M';
      int int0 = Subject.CharTasks.compare('M', '%');
      assertEquals(40, int0);
      
      boolean boolean2 = Subject.GregorianTasks.isLeapYear(40);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string0 = "comp5111.assignment.cut.Subject$NumberTasks";
      boolean boolean3 = Subject.FilenameTasks.isRFC3986HostName("comp5111.assignment.cut.Subject$NumberTasks");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = Subject.NumberTasks.isDigits("comp5111.assignment.cut.Subject$NumberTasks");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string1 = Subject.StringTasks.chop("comp5111.assignment.cut.Subject$NumberTasks");
      assertFalse(string1.equals((Object)string0));
      assertEquals("comp5111.assignment.cut.Subject$NumberTask", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("comp5111.assignment.cut.Subject$NumberTasks");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = Subject.StringTasks.length("comp5111.assignment.cut.Subject$NumberTasks");
      assertFalse(int1 == int0);
      assertEquals(43, int1);
      
      Subject.NumberTasks subject_NumberTasks0 = new Subject.NumberTasks();
      assertNotNull(subject_NumberTasks0);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigInteger(">4'X=h4N0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">4'X=h4N0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "\\/";
      String string1 = Subject.StringTasks.chop("/");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = Subject.GregorianTasks.isLeapYear((-240));
      assertTrue(boolean0);
      
      boolean boolean1 = Subject.FilenameTasks.isSeparator('F');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("::");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = Subject.CharTasks.compare('7', 'x');
      assertEquals((-65), int0);
      
      boolean boolean2 = Subject.StringTasks.isEmpty("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = 'x';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = 'x';
      charArray0[5] = 'A';
      charArray0[6] = '7';
      boolean boolean3 = Subject.ArrayTasks.isEmpty(charArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new char[] {'q', 'x', '7', '7', 'x', 'A', '7'}, charArray0);
      assertFalse(boolean3);
      assertEquals(7, charArray0.length);
      
      String[] stringArray1 = Subject.StringTasks.splitByCharacterType("::");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek((-65), (-240), (-65));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day out of range: -65
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = Subject.StringTasks.chop("An empty string is not a valid number");
      assertEquals("An empty string is not a valid numbe", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "An empty string is not a valid numbe";
      objectArray0[1] = (Object) "An empty string is not a valid numbe";
      objectArray0[2] = (Object) "An empty string is not a valid numbe";
      objectArray0[3] = (Object) "An empty string is not a valid number";
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, objectArray0[1], 2820);
      assertEquals(2, int0);
      assertEquals(4, objectArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2820;
      intArray0[1] = 2;
      boolean boolean0 = Subject.ArrayTasks.isEmpty(intArray0);
      assertArrayEquals(new int[] {2820, 2}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear(32);
      assertTrue(boolean0);
      
      boolean boolean1 = Subject.CharTasks.isAsciiAlphaLower('{');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 32;
      intArray0[1] = (int) '{';
      intArray0[2] = (int) '{';
      intArray0[3] = 0;
      intArray0[4] = (int) '{';
      intArray0[5] = (int) '{';
      boolean boolean2 = Subject.ArrayTasks.isEmpty(intArray0);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {32, 123, 123, 0, 123, 123}, intArray0);
      assertFalse(boolean2);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "";
      String string1 = Subject.StringTasks.chop("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      boolean boolean0 = Subject.StringTasks.containsNone("", charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      boolean boolean1 = Subject.StringTasks.containsNone("", charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertTrue(boolean1);
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // An empty string is not a valid number
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = Subject.FilenameTasks.getName("drj;Y5[qh,N[ZA");
      assertEquals("drj;Y5[qh,N[ZA", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "drj;Y5[qh,N[ZA");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(14, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals("drj;Y5[qh,N[ZA", charBuffer0.toString());
      assertEquals(14, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(14, charBuffer0.length());
      assertEquals(14, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = Subject.StringTasks.equals((CharSequence) "drj;Y5[qh,N[ZA", (CharSequence) charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(14, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals("drj;Y5[qh,N[ZA", charBuffer0.toString());
      assertEquals(14, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(14, charBuffer0.length());
      assertEquals(14, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(boolean0);
      
      String string1 = Subject.StringTasks.chop("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = Subject.StringTasks.equals((CharSequence) "drj;Y5[qh,N[ZA", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("drj;Y5[qh,N[ZA");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = Subject.StringTasks.chomp("drj;Y5[qh,N[ZA");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("drj;Y5[qh,N[ZA", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = Subject.StringTasks.stripEnd("t", "t");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Subject.CharTasks subject_CharTasks0 = new Subject.CharTasks();
      assertEquals('\r', Subject.CharTasks.CR);
      assertEquals('\u0000', Subject.CharTasks.NUL);
      assertEquals('\n', Subject.CharTasks.LF);
      assertNotNull(subject_CharTasks0);
      
      boolean boolean1 = Subject.CharTasks.isAsciiAlpha('r');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = Subject.StringTasks.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int0 = Subject.BooleanTasks.compare(false, false);
      assertEquals(0, int0);
      
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("t");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = Subject.StringTasks.stripEnd("t", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("t", string1);
      assertNotNull(string1);
      
      Subject.NumberTasks subject_NumberTasks0 = new Subject.NumberTasks();
      assertNotNull(subject_NumberTasks0);
      
      boolean boolean3 = Subject.CharTasks.isAsciiAlphaLower('Y');
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      int int1 = Subject.CharTasks.compare('%', '/');
      assertFalse(int1 == int0);
      assertEquals((-10), int1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Subject.StringTasks subject_StringTasks0 = new Subject.StringTasks();
      assertEquals((-1), Subject.StringTasks.INDEX_NOT_FOUND);
      assertNotNull(subject_StringTasks0);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = Subject.StringTasks.splitByCharacterTypeCamelCase(",r#.7r%#nY");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = Subject.FilenameTasks.indexOfLastSeparator("^[a-zA-Z0-9][a-zA-Z0-9-]*$");
      assertEquals((-1), int0);
      
      String[] stringArray2 = Subject.StringTasks.splitByCharacterType("^[a-zA-Z0-9][a-zA-Z0-9-]*$");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(26, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = Subject.FilenameTasks.splitOnTokens("kX");
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      String[] stringArray4 = Subject.StringTasks.splitByCharacterType("^[a-zA-Z0-9][a-zA-Z0-9-]*$");
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray0);
      assertNotSame(stringArray4, stringArray2);
      assertNotSame(stringArray4, stringArray1);
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray0));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertEquals(26, stringArray4.length);
      assertNotNull(stringArray4);
      
      Subject.GregorianTasks subject_GregorianTasks0 = new Subject.GregorianTasks();
      assertEquals((-999999999), Subject.GregorianTasks.MIN_YEAR);
      assertEquals(999999999, Subject.GregorianTasks.MAX_YEAR);
      assertNotNull(subject_GregorianTasks0);
      
      boolean boolean0 = Subject.StringTasks.isNumeric("kX");
      assertFalse(boolean0);
      
      boolean boolean1 = Subject.StringTasks.isBlank("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray5 = Subject.StringTasks.splitByCharacterTypeCamelCase("#");
      assertNotSame(stringArray5, stringArray0);
      assertNotSame(stringArray5, stringArray4);
      assertNotSame(stringArray5, stringArray2);
      assertNotSame(stringArray5, stringArray3);
      assertNotSame(stringArray5, stringArray1);
      assertFalse(stringArray5.equals((Object)stringArray0));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertEquals(1, stringArray5.length);
      assertNotNull(stringArray5);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = Subject.ArrayTasks.lastIndexOf(stringArray3, object0, (-1));
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray5);
      assertNotSame(stringArray3, stringArray4);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray5));
      assertFalse(stringArray3.equals((Object)stringArray4));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals((-1), int1);
      assertEquals(1, stringArray3.length);
      
      boolean boolean2 = Subject.CharTasks.isAsciiPrintable('x');
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray6 = Subject.FilenameTasks.splitOnTokens("");
      assertNotSame(stringArray6, stringArray1);
      assertNotSame(stringArray6, stringArray4);
      assertNotSame(stringArray6, stringArray2);
      assertNotSame(stringArray6, stringArray0);
      assertNotSame(stringArray6, stringArray5);
      assertNotSame(stringArray6, stringArray3);
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray0));
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertEquals(1, stringArray6.length);
      assertNotNull(stringArray6);
      
      int int2 = Subject.NumberTasks.compare((byte)0, (byte)55);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-55), int2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      boolean boolean3 = Subject.StringTasks.containsNone("#", charArray0);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new char[] {'9', 'x', 'x'}, charArray0);
      assertTrue(boolean3);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char char0 = ')';
      boolean boolean0 = Subject.CharTasks.isAsciiAlphaLower(')');
      assertFalse(boolean0);
      
      Subject.GregorianTasks subject_GregorianTasks0 = new Subject.GregorianTasks();
      assertEquals((-999999999), Subject.GregorianTasks.MIN_YEAR);
      assertEquals(999999999, Subject.GregorianTasks.MAX_YEAR);
      assertNotNull(subject_GregorianTasks0);
      
      String string0 = null;
      Number number0 = Subject.NumberTasks.createNumber((String) null);
      assertNull(number0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "*Z6Yh?3dgs";
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("*Z6Yh?3dgs");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createLong("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = Subject.GregorianTasks.isLeapYear(691);
      assertFalse(boolean0);
      
      boolean boolean1 = Subject.CharTasks.isAsciiPrintable('S');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = 1472;
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getLengthOfMonth(691, 1472);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: 1472
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "-f";
      String string1 = Subject.StringTasks.chop("-f");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      int int0 = Subject.BooleanTasks.compare(true, true);
      assertEquals(0, int0);
      
      boolean boolean0 = Subject.GregorianTasks.isLeapYear(0);
      assertTrue(boolean0);
      
      boolean boolean1 = Subject.NumberTasks.isParsable("-f");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = "!iF`/!O|<ek:";
      String string3 = "";
      String string4 = "";
      // Undeclared exception!
      try { 
        Subject.StringTasks.replace(string2, string3, string4);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiControl('d');
      assertFalse(boolean0);
      
      String string0 = "An empty string is not a valid number";
      String string1 = Subject.StringTasks.chomp("An empty string is not a valid number");
      assertTrue(string1.equals((Object)string0));
      assertEquals("An empty string is not a valid number", string1);
      assertNotNull(string1);
      
      boolean boolean1 = Subject.StringTasks.equals((CharSequence) "An empty string is not a valid number", (CharSequence) "An empty string is not a valid number");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = Subject.StringTasks.isMixedCase("An empty string is not a valid number");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      char[] charArray0 = null;
      boolean boolean3 = Subject.ArrayTasks.isEmpty((char[]) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = Subject.StringTasks.isMixedCase("An empty string is not a valid number");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Subject.FilenameTasks.getName("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '/';
      charArray0[2] = 'K';
      charArray0[3] = 'Q';
      charArray0[4] = '0';
      charArray0[5] = ']';
      charArray0[6] = 'W';
      charArray0[7] = '8';
      boolean boolean0 = Subject.StringTasks.containsNone("", charArray0);
      assertArrayEquals(new char[] {'`', '/', 'K', 'Q', '0', ']', 'W', '8'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      int int0 = Subject.NumberTasks.compare((byte)31, (byte)31);
      assertEquals(0, int0);
      
      boolean boolean1 = Subject.CharTasks.isAsciiAlpha('`');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Subject.CharTasks.isAsciiPrintable('w');
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int1 = Subject.BooleanTasks.compare(true, true);
      assertEquals(0, int1);
      
      Subject.ArrayTasks subject_ArrayTasks0 = new Subject.ArrayTasks();
      assertEquals((-1), Subject.ArrayTasks.INDEX_NOT_FOUND);
      assertNotNull(subject_ArrayTasks0);
      
      boolean boolean3 = Subject.CharTasks.isAsciiControl('K');
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string1 = Subject.StringTasks.chomp("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(8, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals("`/KQ0]W8", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.length());
      assertArrayEquals(new char[] {'`', '/', 'K', 'Q', '0', ']', 'W', '8'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        charBuffer0.put("r7*1cFq1O%{eIS");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = Subject.CharTasks.isAsciiAlpha('$');
      assertFalse(boolean0);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("%}VBUfj");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = Subject.FilenameTasks.isSeparator('D');
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Subject.ArrayTasks.lastIndexOf(stringArray0, integer0, (-669));
      assertEquals((-1), int0);
      assertEquals(4, stringArray0.length);
      
      String string0 = Subject.FilenameTasks.getName("%}VBUfj");
      assertEquals("%}VBUfj", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createLong("A blank string is not a valid number");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"A blank string is not a valid number\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = Subject.FilenameTasks.indexOfLastSeparator("");
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      int int1 = Subject.ArrayTasks.lastIndexOf(objectArray0, objectArray0[0], (-1));
      assertEquals((-1), int1);
      assertEquals(1, objectArray0.length);
      
      Character character0 = Character.valueOf('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      char char0 = Subject.CharTasks.toChar(character0, 'z');
      assertEquals('z', char0);
      
      String string0 = Subject.StringTasks.stripEnd("", "A blank string is not a valid number");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Subject.StringTasks.stripEnd("81>$4Hz^]r", "81>$4Hz^]r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      char char0 = Subject.CharTasks.toChar(character0, 'Y');
      assertEquals('5', char0);
      
      int int0 = Subject.ArrayTasks.lastIndexOf((Object[]) null, "81>$4Hz^]r", 4556);
      assertEquals((-1), int0);
      
      int int1 = Subject.CharTasks.compare('u', ' ');
      assertFalse(int1 == int0);
      assertEquals(85, int1);
      
      String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("81>$4Hz^]r");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createFloat("81>$4Hz^]r");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Subject.StringTasks.replace("0X", "0X", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = Subject.StringTasks.length("");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = Subject.StringTasks.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      Subject.ArrayTasks subject_ArrayTasks0 = new Subject.ArrayTasks();
      assertEquals((-1), Subject.ArrayTasks.INDEX_NOT_FOUND);
      assertNotNull(subject_ArrayTasks0);
      
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek((-1488), (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day out of range: -1
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = Subject.FilenameTasks.getName((String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      boolean boolean0 = Subject.StringTasks.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Subject.BooleanTasks subject_BooleanTasks0 = new Subject.BooleanTasks();
      assertNotNull(subject_BooleanTasks0);
      
      String string0 = Subject.StringTasks.replace("kCed<", "kCed<", ".");
      assertEquals(".", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Subject.StringTasks.isNumeric(".");
      assertFalse(boolean0);
      
      String string1 = Subject.StringTasks.chomp(".");
      assertTrue(string1.equals((Object)string0));
      assertEquals(".", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "kCed<";
      objectArray0[1] = (Object) ".";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) ".";
      objectArray0[4] = (Object) "kCed<";
      objectArray0[5] = (Object) ".";
      objectArray0[6] = (Object) ".";
      objectArray0[7] = (Object) ".";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, object1, (-2264));
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertEquals((-1), int0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = Subject.StringTasks.chop("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Subject.StringTasks.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = Subject.CharTasks.isAscii('m');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = (-1);
      boolean boolean2 = Subject.GregorianTasks.isLeapYear((-1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = "LWw-*GG-G ";
      boolean boolean3 = Subject.NumberTasks.isDigits("LWw-*GG-G ");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = Subject.CharTasks.isAsciiAlpha('m');
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.isIPv4Address((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = Subject.StringTasks.splitByCharacterType("Hd!D|Ft_[I}a5&#?SJ<");
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = Subject.StringTasks.chop("Hd!D|Ft_[I}a5&#?SJ<");
      assertEquals("Hd!D|Ft_[I}a5&#?SJ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Subject.StringTasks.isEmpty("Hd!D|Ft_[I}a5&#?SJ<");
      assertFalse(boolean0);
      
      String string1 = Subject.StringTasks.chomp("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Subject.ArrayTasks subject_ArrayTasks0 = new Subject.ArrayTasks();
      assertEquals((-1), Subject.ArrayTasks.INDEX_NOT_FOUND);
      assertNotNull(subject_ArrayTasks0);
      
      boolean boolean1 = Subject.NumberTasks.isParsable("");
      assertFalse(boolean1);
      
      Subject.ArrayTasks subject_ArrayTasks1 = new Subject.ArrayTasks();
      assertEquals((-1), Subject.ArrayTasks.INDEX_NOT_FOUND);
      assertFalse(subject_ArrayTasks1.equals((Object)subject_ArrayTasks0));
      assertNotNull(subject_ArrayTasks1);
      
      Subject.FilenameTasks subject_FilenameTasks0 = new Subject.FilenameTasks();
      assertNotNull(subject_FilenameTasks0);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createInteger("Hd!D|Ft_[I}a5&#?SJ<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Hd!D|Ft_[I}a5&#?SJ<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "8yx^r9J";
      int int0 = Subject.FilenameTasks.indexOfLastSeparator("8yx^r9J");
      assertEquals((-1), int0);
      
      boolean boolean0 = Subject.CharTasks.isAscii('3');
      assertTrue(boolean0);
      
      String string1 = Subject.StringTasks.stripEnd("S", "8yx^r9J");
      assertFalse(string1.equals((Object)string0));
      assertEquals("S", string1);
      assertNotNull(string1);
      
      Subject.CharTasks subject_CharTasks0 = new Subject.CharTasks();
      assertEquals('\r', Subject.CharTasks.CR);
      assertEquals('\n', Subject.CharTasks.LF);
      assertEquals('\u0000', Subject.CharTasks.NUL);
      assertNotNull(subject_CharTasks0);
      
      Subject.CharTasks subject_CharTasks1 = new Subject.CharTasks();
      assertEquals('\u0000', Subject.CharTasks.NUL);
      assertEquals('\n', Subject.CharTasks.LF);
      assertEquals('\r', Subject.CharTasks.CR);
      assertFalse(subject_CharTasks1.equals((Object)subject_CharTasks0));
      assertNotNull(subject_CharTasks1);
      
      String string2 = "";
      boolean boolean1 = Subject.NumberTasks.isDigits("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Subject.StringTasks.isEmpty("S");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = Subject.NumberTasks.compare((byte)0, (byte) (-74));
      assertFalse(int1 == int0);
      assertEquals(74, int1);
      
      Subject.CharTasks subject_CharTasks2 = new Subject.CharTasks();
      assertEquals('\u0000', Subject.CharTasks.NUL);
      assertEquals('\n', Subject.CharTasks.LF);
      assertEquals('\r', Subject.CharTasks.CR);
      assertFalse(subject_CharTasks2.equals((Object)subject_CharTasks1));
      assertFalse(subject_CharTasks2.equals((Object)subject_CharTasks0));
      assertNotNull(subject_CharTasks2);
      
      String string3 = Subject.FilenameTasks.getName("!#");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("!#", string3);
      assertNotNull(string3);
      
      Subject.ArrayTasks subject_ArrayTasks0 = new Subject.ArrayTasks();
      assertEquals((-1), Subject.ArrayTasks.INDEX_NOT_FOUND);
      assertNotNull(subject_ArrayTasks0);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Subject.StringTasks.stripEnd("S\"", "S\"");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Subject.StringTasks.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "*";
      boolean boolean0 = Subject.NumberTasks.isDigits("*");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createLong("*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = Subject.ArrayTasks.lastIndexOf((Object[]) null, object0, (-2298));
      assertEquals((-1), int0);
      
      Subject.GregorianTasks subject_GregorianTasks0 = new Subject.GregorianTasks();
      assertEquals(999999999, Subject.GregorianTasks.MAX_YEAR);
      assertEquals((-999999999), Subject.GregorianTasks.MIN_YEAR);
      assertNotNull(subject_GregorianTasks0);
      
      String string0 = "=#gG'cxIjRf";
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("=#gG'cxIjRf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // =#gG'cxIjRf is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Subject.BooleanTasks subject_BooleanTasks0 = new Subject.BooleanTasks();
      assertNotNull(subject_BooleanTasks0);
      
      int int0 = Subject.CharTasks.compare('a', '6');
      assertEquals(43, int0);
      
      String string0 = Subject.StringTasks.chomp("#;n&k[i[ZX+]=");
      assertEquals("#;n&k[i[ZX+]=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Subject.StringTasks.isMixedCase("#;n&k[i[ZX+]=");
      assertTrue(boolean0);
      
      String string1 = Subject.StringTasks.chomp("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = Subject.FilenameTasks.isIPv6Address("#;n&k[i[ZX+]=");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = Subject.FilenameTasks.getName("#;n&k[i[ZX+]=");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("#;n&k[i[ZX+]=", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = Subject.NumberTasks.compare((byte) (-1), (byte) (-89));
      assertEquals(88, int0);
      
      String string0 = "comp5111.assignment.cut.Subject";
      int int1 = Subject.FilenameTasks.indexOfLastSeparator("comp5111.assignment.cut.Subject");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.flipSeparator('u');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // u
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "$HC;w7(.xr";
      Subject.NumberTasks.isParsable("$HC;w7(.xr");
      Subject.FilenameTasks.isRFC3986HostName("@k;KYPj+{Ml|$->9o'/");
      Subject subject0 = new Subject();
      Subject.StringTasks.isBlank("@k;KYPj+{Ml|$->9o'/");
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("$HC;w7(.xr");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // $HC;w7(.xr is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char char0 = '?';
      Subject.CharTasks.toChar((Character) null, '?');
      Subject.ArrayTasks.getLength((Object) null);
      String string0 = "";
      Subject.FilenameTasks.isIPv6Address("");
      String string1 = null;
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.splitOnTokens((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Subject.ArrayTasks subject_ArrayTasks0 = new Subject.ArrayTasks();
      Character character0 = Character.valueOf('<');
      char char0 = Subject.CharTasks.toChar(character0, 'P');
      assertEquals('<', char0);
      
      Subject.StringTasks subject_StringTasks0 = new Subject.StringTasks();
      Integer integer0 = new Integer((-1));
      int int0 = Subject.ArrayTasks.lastIndexOf(subject_ArrayTasks0.EMPTY_STRING_ARRAY, integer0, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Subject.CharTasks.isAscii('K');
      Subject.StringTasks.chomp("");
      Subject.StringTasks.isNumeric("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      Subject.ArrayTasks.isEmpty(charArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'K';
      intArray0[1] = (int) 'K';
      intArray0[2] = 16;
      intArray0[3] = (int) 'K';
      intArray0[4] = (int) 'K';
      intArray0[5] = (int) 'K';
      intArray0[6] = (int) 'K';
      intArray0[7] = (int) 'K';
      Subject.ArrayTasks.isEmpty(intArray0);
      Subject.StringTasks.replace("", "R4mrFMv~6_M;-P+-*U", "xHS[");
      // Undeclared exception!
      try { 
        Subject.ArrayTasks.getLength("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Subject.CharTasks.compare('F', 'F');
      Subject.BooleanTasks.compare(true, true);
      Subject.CharTasks.isAsciiControl('x');
      String string0 = "";
      Subject.StringTasks.chop("");
      Subject.FilenameTasks.isRFC3986HostName("");
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber(", 7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \", 7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "8:5g+#?z7kzmK\"f_";
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigInteger("8:5g+#?z7kzmK\"f_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Subject.NumberTasks subject_NumberTasks0 = new Subject.NumberTasks();
      String string0 = "AF>/D\\gCykynH{B";
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("AF>/DgCykynH{B");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // AF>/DgCykynH{B is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Subject.StringTasks.chomp("+\"O?:o7");
      char char0 = '\\';
      Subject.CharTasks.isAsciiAlpha('\\');
      Subject.StringTasks subject_StringTasks0 = new Subject.StringTasks();
      Subject.StringTasks.splitByCharacterTypeCamelCase("+\"O?:o7");
      Subject.StringTasks.splitByCharacterTypeCamelCase("");
      String string0 = "";
      String string1 = "\"a_#j|0iZ4?]kU/a";
      Subject.StringTasks.splitByCharacterTypeCamelCase("g,<84_");
      Subject.StringTasks.splitByCharacterTypeCamelCase("\"a_#j|0iZ4?]kU/a");
      Subject.StringTasks.splitByCharacterTypeCamelCase("");
      int int0 = 68;
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek((-1), (-1), 68);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day out of range: 68
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Subject.NumberTasks subject_NumberTasks0 = new Subject.NumberTasks();
      Subject.CharTasks subject_CharTasks0 = new Subject.CharTasks();
      Subject.NumberTasks subject_NumberTasks1 = new Subject.NumberTasks();
      Character character0 = Character.valueOf('@');
      Subject.CharTasks.toChar(character0, '\n');
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate((-576), (-576), (-1680));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: -576
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Subject.ArrayTasks.isEmpty(intArray0);
      String string0 = "(IS[:T|.T`y3";
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("(IS[:T|.T`y3");
      char char0 = '\\';
      Subject.CharTasks.isAsciiAlphaUpper('\\');
      Subject.ArrayTasks.lastIndexOf(stringArray0, "(IS[:T|.T`y3", 0);
      Subject.NumberTasks subject_NumberTasks0 = new Subject.NumberTasks();
      char char1 = '@';
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("(IS[:T|.T`y3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character ( is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      int int0 = (-555);
      Subject.ArrayTasks.lastIndexOf(objectArray0, object3, (-555));
      char char0 = '&';
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.flipSeparator('&');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // &
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "4";
      Subject.StringTasks.chop("4");
      // Undeclared exception!
      try { 
        Subject.ArrayTasks.getLength("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = '<';
      charArray0[2] = 'm';
      charArray0[3] = 'e';
      charArray0[4] = '(';
      charArray0[5] = 'L';
      charArray0[6] = 'Z';
      charArray0[7] = 'U';
      charArray0[8] = '|';
      boolean boolean0 = Subject.ArrayTasks.isEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = Subject.NumberTasks.isParsable("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 1;
      Subject.GregorianTasks.getLengthOfMonth(1, 1);
      String string0 = "B2| tG\\M-#|fBj3[xu";
      Subject.StringTasks.splitByCharacterType("B2| tGM-#|fBj3[xu");
      int int1 = 1323;
      Subject.GregorianTasks.isLeapYear(1323);
      // Undeclared exception!
      try { 
        Subject.ArrayTasks.getLength("B2| tGM-#|fBj3[xu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char char0 = 's';
      Subject.FilenameTasks.isSeparator('s');
      Subject subject0 = new Subject();
      Subject.StringTasks.chomp("");
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.flipSeparator('s');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char char0 = '_';
      Subject.CharTasks.isAsciiAlphaLower('_');
      String string0 = "nWB*@1t6*9`\"!Cvc";
      Subject.StringTasks.stripEnd("comp5111.assignment.cut.Subject", "nWB*@1t6*9`\"!Cvc");
      Subject.NumberTasks.isParsable("comp5111.assignment.cut.Subject");
      Subject subject0 = new Subject();
      Subject.StringTasks.isEmpty("comp5111.assignment.cut.Subje");
      Subject.CharTasks.isAsciiPrintable('_');
      Subject.StringTasks.splitByCharacterTypeCamelCase("");
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate(1, 1, 3494);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DAY_OF_MONTH out of range: 3494
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char char0 = 'A';
      Subject.FilenameTasks.isSeparator('A');
      char char1 = 'Q';
      Subject.CharTasks.isAsciiPrintable('Q');
      String string0 = "|>T@9?=A-\"=";
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigDecimal("|>T@9?=A-\"=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character | is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = Subject.NumberTasks.compare((byte) (-62), (byte) (-36));
      assertEquals((-26), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Subject.CharTasks.isAsciiAlpha('D');
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek(963, 1215, 1215);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day out of range: 1215
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "'xo8GfPy$wCf'nF7es;";
      Subject.FilenameTasks.isIPv4Address("'xo8GfPy$wCf'nF7es;");
      Subject.FilenameTasks.isIPv4Address("'xo8GfPy$wCf'nF7es;");
      Subject.FilenameTasks.getName("'xo8GfPy$wCf'nF7es;");
      Subject.GregorianTasks subject_GregorianTasks0 = new Subject.GregorianTasks();
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createInteger("'xo8GfPy$wCf'nF7es;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'xo8GfPy$wCf'nF7es;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Subject.CharTasks.isAscii('l');
      String string0 = "SPi<n3Qf92K92L ";
      String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("SPi<n3Qf92K92L ");
      char char0 = 'd';
      Subject.CharTasks.isAsciiAlphaUpper('d');
      Subject.GregorianTasks.isLeapYear(0);
      Subject.FilenameTasks.isIPv6Address("SPi<n3Qf92K92L ");
      Subject.ArrayTasks subject_ArrayTasks0 = new Subject.ArrayTasks();
      Object object0 = new Object();
      Subject.ArrayTasks.lastIndexOf(stringArray0, object0, (-1));
      Subject.FilenameTasks.getName("SPi<n3Qf92K92L ");
      Subject.FilenameTasks.isRFC3986HostName("SPi<n3Qf92K92L ");
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createFloat("SPi<n3Qf92K92L ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char char0 = '6';
      Subject.CharTasks.isAsciiAlpha('6');
      Subject.CharTasks.isAsciiAlphaLower('6');
      Subject.StringTasks.chop("hz<Aa8e");
      int int0 = 642;
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate(642, 642, 642);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: 642
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Subject.StringTasks.equals((CharSequence) null, (CharSequence) null);
      int[] intArray0 = new int[0];
      Subject.ArrayTasks.isEmpty(intArray0);
      Subject.NumberTasks subject_NumberTasks0 = new Subject.NumberTasks();
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate((-1), (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: -1
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createLong("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getLengthOfMonth((-1422), (-1019));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: -1019
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "";
      Subject.StringTasks.chomp("");
      String string1 = "6#E&Jub1";
      Subject.NumberTasks.isParsable("6#E&Jub1");
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Subject.FilenameTasks.isIPv4Address("Hq");
      Subject.StringTasks.equals((CharSequence) "Hq", (CharSequence) "Hq");
      Subject.FilenameTasks.isIPv4Address("MSM7q:^Dmw.lT,");
      Subject.CharTasks.isAsciiPrintable('\\');
      Subject.NumberTasks.isParsable("MSM7q:^Dmw.lT,");
      Subject.GregorianTasks.getLengthOfMonth(5, 5);
      boolean boolean0 = Subject.FilenameTasks.isSeparator('\\');
      Subject.GregorianTasks.getDayOfWeek(5, 5, 31);
      Subject.GregorianTasks.checkDate(157, 2, 2);
      Subject.StringTasks.isMixedCase("MSM7q:^Dmw.lT,");
      boolean boolean1 = Subject.CharTasks.isAsciiControl('P');
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char char0 = '0';
      Subject.CharTasks.isAsciiControl('0');
      Subject.CharTasks.isAsciiPrintable('0');
      Subject.StringTasks.chop("I;R@PTBT@qA7L!");
      Subject.StringTasks.chop("");
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'S';
      charArray0[2] = '?';
      charArray0[3] = 'r';
      charArray0[4] = 'y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.get(charArray0);
      charBuffer0.chars();
      charBuffer0.flip();
      charBuffer0.clear();
      Subject.StringTasks.isMixedCase(charBuffer0);
      Subject.StringTasks.isBlank(charBuffer0);
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate(2354, 2354, 102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: 2354
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Subject.StringTasks.isBlank((CharSequence) null);
      Subject.StringTasks.isMixedCase((CharSequence) null);
      char char0 = 'M';
      int int0 = Subject.StringTasks.INDEX_NOT_FOUND;
      Subject.GregorianTasks.isLeapYear((-1));
      String string0 = "comp5111.assignment.cut.Subject$NumberTasks";
      Subject.FilenameTasks.isRFC3986HostName("comp5111.assignment.cut.Subject$NumberTasks");
      Subject.StringTasks.isMixedCase("comp5111.assignment.cut.Subject$NumberTasks");
      Subject.StringTasks.chop("comp5111.assignment.cut.Subject$NumberTasks");
      Subject.StringTasks.splitByCharacterTypeCamelCase("comp5111.assignment.cut.Subject$NumberTasks");
      Subject.StringTasks.length("comp5111.assignment.cut.Subject$NumberTasks");
      Subject.NumberTasks subject_NumberTasks0 = new Subject.NumberTasks();
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createBigInteger(">4'X=h4N0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">4'X=h4N0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Subject.StringTasks.chomp(":comp5111.assignment.cut.Subject$GregorianTasks");
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '<';
      charArray0[2] = '~';
      charArray0[3] = 'L';
      Subject.StringTasks.containsNone(":comp5111.assignment.cut.Subject$GregorianTasks", charArray0);
      Subject.CharTasks.isAsciiAlphaUpper('@');
      Subject.StringTasks.replace("GwtH", ":comp5111.assignment.cut.Subject$GregorianTasks", ":comp5111.assignment.cut.Subject$GregorianTasks");
      Subject.NumberTasks.isParsable(":comp5111.assignment.cut.Subject$GregorianTasks");
      Subject.FilenameTasks.getName(":comp5111.assignment.cut.Subject$GregorianTasks");
      Subject.FilenameTasks.isIPv6Address("0x");
      Subject.StringTasks.chomp("comp5111.assignment.cut.Subject$FilenameTasks");
      String string0 = Subject.StringTasks.EMPTY;
      Subject.StringTasks.isNumeric("");
      Subject.StringTasks.containsAny("GwtH", charArray0);
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.checkDate(10, 1444, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH out of range: 1444
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = Subject.StringTasks.EMPTY;
      Subject.GregorianTasks.isLeapYear((-240));
      Subject.FilenameTasks.isSeparator('F');
      Subject.StringTasks.splitByCharacterTypeCamelCase("::");
      Subject.CharTasks.compare('7', 'x');
      Subject.StringTasks.isEmpty("");
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = 'x';
      charArray0[1] = '7';
      charArray0[3] = '7';
      charArray0[0] = 'x';
      charArray0[5] = 'A';
      charArray0[2] = '7';
      Subject.ArrayTasks.isEmpty(charArray0);
      Subject.StringTasks.splitByCharacterType("::");
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek((-65), (-240), (-65));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day out of range: -65
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      Subject.ArrayTasks.isEmpty(intArray0);
      Subject.StringTasks subject_StringTasks0 = new Subject.StringTasks();
      Subject.GregorianTasks.isLeapYear(0);
      char char0 = '-';
      // Undeclared exception!
      try { 
        Subject.FilenameTasks.flipSeparator('-');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -
         //
         verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char char0 = '#';
      Subject.CharTasks.isAscii('#');
      Subject.StringTasks.splitByCharacterTypeCamelCase("-*R]M");
      Subject.CharTasks.isAsciiPrintable('#');
      Subject subject0 = new Subject();
      Subject.StringTasks.chop("");
      Subject.CharTasks.isAsciiControl('#');
      Subject.FilenameTasks.isIPv4Address("");
      Subject.StringTasks.chomp("");
      Subject.StringTasks.isNumeric("");
      String string0 = "";
      Subject.FilenameTasks.indexOfLastSeparator("");
      Subject.FilenameTasks.splitOnTokens("::");
      String string1 = "I1";
      String string2 = "[eg4?'/";
      // Undeclared exception!
      try { 
        Subject.StringTasks.replace(string1, string0, string2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      Subject.CharTasks.compare(':', ':');
      Subject.StringTasks.chomp("");
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createLong("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Subject.BooleanTasks subject_BooleanTasks0 = new Subject.BooleanTasks();
      Subject subject0 = new Subject();
      Character character0 = Character.valueOf('T');
      Subject.CharTasks.toChar(character0, '4');
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = '4';
      charArray0[3] = 'o';
      charArray0[4] = '4';
      charArray0[5] = 'T';
      charArray0[6] = 'T';
      charArray0[7] = 'T';
      charArray0[8] = 'T';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Subject.StringTasks.isNumeric(charBuffer0);
      String string0 = "\"b";
      Subject.StringTasks.chomp("\"b");
      Subject.StringTasks.containsAny("\"b", charArray0);
      Subject.NumberTasks.compare((byte)0, (byte)0);
      Subject.CharTasks.isAsciiAlpha('t');
      char char0 = 'l';
      Subject.CharTasks.isAscii('l');
      Subject.GregorianTasks.isLeapYear(0);
      Subject.FilenameTasks.isRFC3986HostName("");
      Subject.CharTasks.isAsciiAlphaLower('M');
      Subject.FilenameTasks.splitOnTokens("#");
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getLengthOfMonth(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: 0
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "32^Gy)sUIc";
      Subject.NumberTasks.isDigits("32^Gy)sUIc");
      Subject.BooleanTasks.compare(true, false);
      Subject.FilenameTasks.isIPv6Address("3p^Gy)sUIc");
      Subject.FilenameTasks.getName("32^Gy)sUIc");
      Subject.StringTasks.equals((CharSequence) "32^Gy)sUIc", (CharSequence) "32^Gy)sUIc");
      Subject subject0 = new Subject();
      Subject.StringTasks.stripEnd("32^Gy)sUIc", "32^Gy)sUIc");
      Subject.GregorianTasks.checkDate(1, 1, 1);
      Subject.StringTasks.splitByCharacterTypeCamelCase("32^Gy)sUIc");
      String string1 = "[<(dH$";
      Subject.FilenameTasks.splitOnTokens("[<(dH$");
      Subject.FilenameTasks.splitOnTokens("");
      // Undeclared exception!
      try { 
        Subject.NumberTasks.createNumber("32^Gy)sUIc");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 32^Gy)sUIc is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = 'd';
      charArray0[2] = '\\';
      charArray0[3] = 'y';
      charArray0[4] = 'r';
      charArray0[5] = 'N';
      charArray0[6] = '$';
      charArray0[7] = 'x';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.rewind();
      Subject.StringTasks.containsNone(charBuffer0, charArray0);
      Subject.CharTasks.isAsciiAlpha('$');
      // Undeclared exception!
      try { 
        Subject.GregorianTasks.getDayOfWeek((-3269), 128, 3373);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day out of range: 3373
         //
         verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
      }
  }
}
