/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 07:07:25 GMT 2023
 */

 package comp5111.assignment.cut;

 import org.junit.Test;
 import static org.junit.Assert.*;
 import static org.evosuite.runtime.EvoAssertions.*;
 import comp5111.assignment.cut.Subject;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import org.evosuite.runtime.EvoRunner;
 import org.evosuite.runtime.EvoRunnerParameters;
 import org.junit.runner.RunWith;
 
 // @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
 public class Subject_FaultRevealing0_ESTest {
 
   @Test(timeout = 4000)
   public void test000()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.GregorianTasks.checkDate(999999999, 0, 28);
         fail("Expecting exception: IllegalArgumentException");
       
       } catch(IllegalArgumentException e) {
          //
          // MONTH out of range: 0
          //
          verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test001()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.GregorianTasks.checkDate((-999999999), (byte)0, (-999999999));
         fail("Expecting exception: IllegalArgumentException");
       
       } catch(IllegalArgumentException e) {
          //
          // MONTH out of range: 0
          //
          verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test002()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.GregorianTasks.getLengthOfMonth((-3141), (-3141));
         fail("Expecting exception: IllegalArgumentException");
       
       } catch(IllegalArgumentException e) {
          //
          // Invalid month: -3141
          //
          verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test003()  throws Throwable  {
       boolean boolean0 = Subject.GregorianTasks.isLeapYear((-5444));
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test004()  throws Throwable  {
       Object[] objectArray0 = new Object[4];
       objectArray0[2] = (Object) "";
       int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, objectArray0[2], 4108);
       assertEquals(2, int0);
   }
 
   @Test(timeout = 4000)
   public void test005()  throws Throwable  {
       Object[] objectArray0 = new Object[0];
       int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, "X>>!J'Ja\"", 0);
       assertEquals((-1), int0);
   }
 
   @Test(timeout = 4000)
   public void test006()  throws Throwable  {
       boolean boolean0 = Subject.CharTasks.isAsciiAlphaLower('z');
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test007()  throws Throwable  {
       boolean boolean0 = Subject.CharTasks.isAsciiAlpha('Z');
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test008()  throws Throwable  {
       boolean boolean0 = Subject.CharTasks.isAsciiAlpha('A');
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test009()  throws Throwable  {
       boolean boolean0 = Subject.CharTasks.isAsciiPrintable(' ');
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test010()  throws Throwable  {
       int int0 = Subject.NumberTasks.compare((byte)101, (byte)101);
       assertEquals(0, int0);
   }
 
   @Test(timeout = 4000)
   public void test011()  throws Throwable  {
       boolean boolean0 = Subject.NumberTasks.isParsable("(P");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test012()  throws Throwable  {
       boolean boolean0 = Subject.NumberTasks.isParsable("o :HG>].3M}7@#|6U&'");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test013()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createBigInteger("\">O.`^_j;\"m\"");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // For input string: \"\">O\"
          //
          verifyException("java.lang.NumberFormatException", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test014()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createNumber("\"Tr@nYt}");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // \"Tr@nYt} is not a valid number.
          //
          verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test015()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.equals((CharSequence) "6!zj_1JaUm?uV4QiSl/", (CharSequence) "Yn^+'1>ub):S{(/xjD");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test016()  throws Throwable  {
       char[] charArray0 = new char[8];
       charArray0[0] = '@';
       boolean boolean0 = Subject.StringTasks.containsAny("s|)dtoa0Ns&Jc]ePw7R", charArray0);
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test017()  throws Throwable  {
       String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("INa>&cH+:Kodwo:");
       assertEquals(10, stringArray0.length);
   }
 
   @Test(timeout = 4000)
   public void test018()  throws Throwable  {
       String string0 = Subject.StringTasks.chop("0:");
       assertEquals("0", string0);
   }
 
   @Test(timeout = 4000)
   public void test019()  throws Throwable  {
       String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("*");
       assertEquals(1, stringArray0.length);
   }
 
   @Test(timeout = 4000)
   public void test020()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isSeparator('(');
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test021()  throws Throwable  {
       String string0 = Subject.FilenameTasks.getName(")ehRy1(dWe#^/");
       assertEquals("", string0);
   }
 
   @Test(timeout = 4000)
   public void test022()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.FilenameTasks.flipSeparator('y');
         fail("Expecting exception: IllegalArgumentException");
       
       } catch(IllegalArgumentException e) {
          //
          // y
          //
          verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test023()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.FilenameTasks.flipSeparator('W');
         fail("Expecting exception: IllegalArgumentException");
       
       } catch(IllegalArgumentException e) {
          //
          // W
          //
          verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test024()  throws Throwable  {
       int int0 = Subject.ArrayTasks.getLength((Object) null);
       assertEquals(0, int0);
   }
 
   @Test(timeout = 4000)
   public void test025()  throws Throwable  {
       int int0 = Subject.StringTasks.length("Yn^+'1>ub):S{(/xjD");
       assertEquals(18, int0);
   }
 
   @Test(timeout = 4000)
   public void test026()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.isNumeric("#XW4?lK_%&1");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test027()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.isBlank("B|\u0001#;~Ux-$|`u");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test028()  throws Throwable  {
       boolean boolean0 = Subject.CharTasks.isAsciiAlphaUpper('!');
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test029()  throws Throwable  {
       boolean boolean0 = Subject.CharTasks.isAsciiAlphaLower(']');
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test030()  throws Throwable  {
       char[] charArray0 = new char[8];
       boolean boolean0 = Subject.ArrayTasks.isEmpty(charArray0);
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test031()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isIPv6Address("0X");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test032()  throws Throwable  {
       int int0 = Subject.GregorianTasks.getDayOfWeek(1, 1, 1);
       assertEquals(1, int0);
   }
 
   @Test(timeout = 4000)
   public void test033()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.GregorianTasks.getDayOfWeek(31, 0, 1955);
         fail("Expecting exception: IllegalArgumentException");
       
       } catch(IllegalArgumentException e) {
          //
          // Day out of range: 1955
          //
          verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test034()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.GregorianTasks.getDayOfWeek(3, 122, (-511));
         fail("Expecting exception: IllegalArgumentException");
       
       } catch(IllegalArgumentException e) {
          //
          // Day out of range: -511
          //
          verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test035()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.GregorianTasks.checkDate((-8323580), 3, 32);
         fail("Expecting exception: IllegalArgumentException");
       
       } catch(IllegalArgumentException e) {
          //
          // DAY_OF_MONTH out of range: 32
          //
          verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test036()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.GregorianTasks.checkDate(3, 3, (-713));
         fail("Expecting exception: IllegalArgumentException");
       
       } catch(IllegalArgumentException e) {
          //
          // DAY_OF_MONTH out of range: -713
          //
          verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test037()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.GregorianTasks.checkDate(1815, 174, 0);
         fail("Expecting exception: IllegalArgumentException");
       
       } catch(IllegalArgumentException e) {
          //
          // MONTH out of range: 174
          //
          verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test038()  throws Throwable  {
       int int0 = Subject.GregorianTasks.getLengthOfMonth(11, 11);
       assertEquals(30, int0);
   }
 
   @Test(timeout = 4000)
   public void test039()  throws Throwable  {
       int int0 = Subject.GregorianTasks.getDayOfWeek(0, 9, 9);
       assertEquals(6, int0);
   }
 
   @Test(timeout = 4000)
   public void test040()  throws Throwable  {
       int int0 = Subject.GregorianTasks.getDayOfWeek(6, 6, 1);
       assertEquals(4, int0);
   }
 
   @Test(timeout = 4000)
   public void test041()  throws Throwable  {
       int int0 = Subject.GregorianTasks.getLengthOfMonth(10, 10);
       assertEquals(31, int0);
   }
 
   @Test(timeout = 4000)
   public void test042()  throws Throwable  {
       int int0 = Subject.GregorianTasks.getLengthOfMonth(16, 8);
       assertEquals(31, int0);
   }
 
   @Test(timeout = 4000)
   public void test043()  throws Throwable  {
       Subject.GregorianTasks.checkDate((-702), 7, 3);
   }
 
   @Test(timeout = 4000)
   public void test044()  throws Throwable  {
       int int0 = Subject.GregorianTasks.getLengthOfMonth((-234), 5);
       assertEquals(31, int0);
   }
 
   @Test(timeout = 4000)
   public void test045()  throws Throwable  {
       int int0 = Subject.GregorianTasks.getLengthOfMonth(3, 3);
       assertEquals(31, int0);
   }
 
   @Test(timeout = 4000)
   public void test046()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.GregorianTasks.getLengthOfMonth(0, 826);
         fail("Expecting exception: IllegalArgumentException");
       
       } catch(IllegalArgumentException e) {
          //
          // Invalid month: 826
          //
          verifyException("comp5111.assignment.cut.Subject$GregorianTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test047()  throws Throwable  {
       boolean boolean0 = Subject.GregorianTasks.isLeapYear(0);
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test048()  throws Throwable  {
       boolean boolean0 = Subject.GregorianTasks.isLeapYear(372);
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test049()  throws Throwable  {
       boolean boolean0 = Subject.GregorianTasks.isLeapYear(1900);
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test050()  throws Throwable  {
       boolean boolean0 = Subject.GregorianTasks.isLeapYear(2231);
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test051()  throws Throwable  {
       Object[] objectArray0 = new Object[3];
       Object object0 = new Object();
       objectArray0[0] = object0;
       int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, object0, 0);
       assertEquals(0, int0);
   }
 
   @Test(timeout = 4000)
   public void test052()  throws Throwable  {
       Object[] objectArray0 = new Object[3];
       Object object0 = new Object();
       objectArray0[0] = object0;
       String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
       int int0 = Subject.ArrayTasks.lastIndexOf(stringArray0, objectArray0[0], 639);
       assertEquals((-1), int0);
   }
 
   @Test(timeout = 4000)
   public void test053()  throws Throwable  {
       Object[] objectArray0 = new Object[5];
       Object object0 = new Object();
       objectArray0[4] = object0;
       int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, (Object) null, 10);
       assertEquals(3, int0);
   }
 
   @Test(timeout = 4000)
   public void test054()  throws Throwable  {
       Object[] objectArray0 = new Object[3];
       int int0 = Subject.ArrayTasks.lastIndexOf(objectArray0, objectArray0[0], 0);
       assertEquals(0, int0);
   }
 
   @Test(timeout = 4000)
   public void test055()  throws Throwable  {
       Object[] objectArray0 = new Object[3];
       String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("");
       int int0 = Subject.ArrayTasks.lastIndexOf(stringArray0, objectArray0[2], 639);
       assertEquals((-1), int0);
   }
 
   @Test(timeout = 4000)
   public void test056()  throws Throwable  {
       String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("~<}#{@ 97");
       int int0 = Subject.ArrayTasks.lastIndexOf(stringArray0, "", (-2367));
       assertEquals((-1), int0);
   }
 
   @Test(timeout = 4000)
   public void test057()  throws Throwable  {
       int int0 = Subject.ArrayTasks.lastIndexOf((Object[]) null, "", 1449);
       assertEquals((-1), int0);
   }
 
   @Test(timeout = 4000)
   public void test058()  throws Throwable  {
       boolean boolean0 = Subject.CharTasks.isAsciiAlpha('{');
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test059()  throws Throwable  {
       boolean boolean0 = Subject.CharTasks.isAsciiAlpha('h');
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test060()  throws Throwable  {
       boolean boolean0 = Subject.CharTasks.isAsciiControl('');
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test061()  throws Throwable  {
       boolean boolean0 = Subject.CharTasks.isAsciiControl('p');
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test062()  throws Throwable  {
       boolean boolean0 = Subject.CharTasks.isAsciiControl('\n');
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test063()  throws Throwable  {
       boolean boolean0 = Subject.CharTasks.isAsciiPrintable('E');
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test064()  throws Throwable  {
       boolean boolean0 = Subject.CharTasks.isAsciiPrintable('\r');
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test065()  throws Throwable  {
       boolean boolean0 = Subject.CharTasks.isAscii('7');
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test066()  throws Throwable  {
       Character character0 = Character.valueOf(',');
       char char0 = Subject.CharTasks.toChar(character0, ',');
       assertEquals(',', char0);
   }
 
   @Test(timeout = 4000)
   public void test067()  throws Throwable  {
       char char0 = Subject.CharTasks.toChar((Character) null, '>');
       assertEquals('>', char0);
   }
 
   @Test(timeout = 4000)
   public void test068()  throws Throwable  {
       int int0 = Subject.BooleanTasks.compare(true, false);
       assertEquals(1, int0);
   }
 
   @Test(timeout = 4000)
   public void test069()  throws Throwable  {
       int int0 = Subject.BooleanTasks.compare(false, false);
       assertEquals(0, int0);
   }
 
   @Test(timeout = 4000)
   public void test070()  throws Throwable  {
       int int0 = Subject.BooleanTasks.compare(false, true);
       assertEquals((-1), int0);
   }
 
   @Test(timeout = 4000)
   public void test071()  throws Throwable  {
       boolean boolean0 = Subject.NumberTasks.isParsable("7");
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test072()  throws Throwable  {
       boolean boolean0 = Subject.NumberTasks.isParsable("");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test073()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createBigDecimal("");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // A blank string is not a valid number
          //
          verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test074()  throws Throwable  {
       BigDecimal bigDecimal0 = Subject.NumberTasks.createBigDecimal((String) null);
       assertNull(bigDecimal0);
   }
 
   @Test(timeout = 4000)
   public void test075()  throws Throwable  {
       BigInteger bigInteger0 = Subject.NumberTasks.createBigInteger("0");
       assertEquals((short)0, bigInteger0.shortValue());
   }
 
   @Test(timeout = 4000)
   public void test076()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createNumber("@ChN$JywaSSyD3");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // For input string: \"@ChN$\"
          //
          verifyException("java.lang.NumberFormatException", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test077()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createNumber("0@ChN$JywaSSyD3");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // For input string: \"@ChN\"
          //
          verifyException("java.lang.NumberFormatException", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test078()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createBigInteger("");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // An empty string is not a valid number
          //
          verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test079()  throws Throwable  {
       BigInteger bigInteger0 = Subject.NumberTasks.createBigInteger((String) null);
       assertNull(bigInteger0);
   }
 
   @Test(timeout = 4000)
   public void test080()  throws Throwable  {
       Long long0 = Subject.NumberTasks.createLong((String) null);
       assertNull(long0);
   }
 
   @Test(timeout = 4000)
   public void test081()  throws Throwable  {
       Integer integer0 = Subject.NumberTasks.createInteger((String) null);
       assertNull(integer0);
   }
 
   @Test(timeout = 4000)
   public void test082()  throws Throwable  {
       Double double0 = Subject.NumberTasks.createDouble((String) null);
       assertNull(double0);
   }
 
   @Test(timeout = 4000)
   public void test083()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createDouble("24:i2P|i>%+U9Mt0");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
       }
   }
 
   @Test(timeout = 4000)
   public void test084()  throws Throwable  {
       Float float0 = Subject.NumberTasks.createFloat((String) null);
       assertNull(float0);
   }
 
   @Test(timeout = 4000)
   public void test085()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createNumber("[;^e$9Pq3");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // Character [ is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
          //
          verifyException("java.math.BigDecimal", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test086()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createNumber("L");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // L is not a valid number.
          //
          verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test087()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createNumber("0q%:EjRX:");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // 0q%:EjRX: is not a valid number.
          //
          verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test088()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createNumber("comp5111.assignment.cut.Subject$CharTasks");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // comp5111.assignment.cut.Subject$CharTasks is not a valid number.
          //
          verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test089()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createNumber(".");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // No digits found.
          //
          verifyException("java.math.BigDecimal", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test090()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createNumber("#<CYB%");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // For input string: \"<CYB%\"
          //
          verifyException("java.lang.NumberFormatException", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test091()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createNumber("0X0 PnRcs}(urO]hc$Y:eQ");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // For input string: \" PnRc\"
          //
          verifyException("java.lang.NumberFormatException", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test092()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createNumber("0x,|(;(d\"@=6~?qbi&<");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // For input string: \",|(\"
          //
          verifyException("java.lang.NumberFormatException", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test093()  throws Throwable  {
       Number number0 = Subject.NumberTasks.createNumber("-7");
       assertEquals((-7), number0);
   }
 
   @Test(timeout = 4000)
   public void test094()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createNumber("+H=Q4'");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // +H=Q4' is not a valid number.
          //
          verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test095()  throws Throwable  {
       Number number0 = Subject.NumberTasks.createNumber((String) null);
       assertNull(number0);
   }
 
   @Test(timeout = 4000)
   public void test096()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.StringTasks.replace("C'MJ|", "", "");
         fail("Expecting exception: StackOverflowError");
       
       } catch(StackOverflowError e) {
          //
          // no message in exception (getMessage() returned null)
          //
       }
   }
 
   @Test(timeout = 4000)
   public void test097()  throws Throwable  {
       String string0 = Subject.StringTasks.replace(")eWG!y,(6,#=t", ")eWG!y,(6,#=t", ")eWG!y,(6,#=t");
       assertEquals(")eWG!y,(6,#=t", string0);
   }
 
   @Test(timeout = 4000)
   public void test098()  throws Throwable  {
       String string0 = Subject.StringTasks.replace("^}:-Li[(5<n", "", (String) null);
       assertNotNull(string0);
       assertEquals("^}:-Li[(5<n", string0);
   }
 
   @Test(timeout = 4000)
   public void test099()  throws Throwable  {
       String string0 = Subject.StringTasks.replace("B", (String) null, "");
       assertNotNull(string0);
       assertEquals("B", string0);
   }
 
   @Test(timeout = 4000)
   public void test100()  throws Throwable  {
       String string0 = Subject.StringTasks.replace("Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it", "wQNLjcS.>cCN!~m", "Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it");
       assertEquals("Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it", string0);
   }
 
   @Test(timeout = 4000)
   public void test101()  throws Throwable  {
       String string0 = Subject.StringTasks.replace((String) null, "0", "");
       assertNull(string0);
   }
 
   @Test(timeout = 4000)
   public void test102()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.isMixedCase("}<6?LKID>7");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test103()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.isMixedCase("Sk");
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test104()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.isMixedCase("s|)dtoa0Ns&Jc]ePw7R");
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test105()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.isMixedCase("3");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test106()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.isMixedCase("xq");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test107()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.isMixedCase("");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test108()  throws Throwable  {
       String string0 = Subject.StringTasks.stripEnd("0q", "a80N5)V=UnDjEBYy");
       assertEquals("0q", string0);
   }
 
   @Test(timeout = 4000)
   public void test109()  throws Throwable  {
       String string0 = Subject.StringTasks.stripEnd("+&zRLs-", "");
       assertEquals("+&zRLs-", string0);
   }
 
   @Test(timeout = 4000)
   public void test110()  throws Throwable  {
       String string0 = Subject.StringTasks.stripEnd("(zYy|l[h@", (String) null);
       assertEquals("(zYy|l[h@", string0);
   }
 
   @Test(timeout = 4000)
   public void test111()  throws Throwable  {
       String string0 = Subject.StringTasks.stripEnd("6!zj_1JaUm?uV4QiSl/", "6!zj_1JaUm?uV4QiSl/");
       assertEquals("", string0);
   }
 
   @Test(timeout = 4000)
   public void test112()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.equals((CharSequence) "", (CharSequence) "");
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test113()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.equals((CharSequence) "", (CharSequence) null);
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test114()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.equals((CharSequence) null, (CharSequence) "");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test115()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.equals((CharSequence) null, (CharSequence) null);
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test116()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.equals((CharSequence) "", (CharSequence) "cB{*Z@Qra~4pV6#'");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test117()  throws Throwable  {
       char[] charArray0 = new char[7];
       charArray0[1] = 'T';
       boolean boolean0 = Subject.StringTasks.containsNone("Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it", charArray0);
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test118()  throws Throwable  {
       char[] charArray0 = new char[4];
       boolean boolean0 = Subject.StringTasks.containsNone("0q", charArray0);
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test119()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.containsNone("B|\u0001#;~Ux-$|`u", (char[]) null);
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test120()  throws Throwable  {
       char[] charArray0 = new char[5];
       boolean boolean0 = Subject.StringTasks.containsNone((CharSequence) null, charArray0);
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test121()  throws Throwable  {
       char[] charArray0 = new char[8];
       charArray0[7] = ')';
       boolean boolean0 = Subject.StringTasks.containsAny("s|)dtoa0Ns&Jc]ePw7R", charArray0);
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test122()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.containsAny("0X", (char[]) null);
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test123()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.containsAny("", (char[]) null);
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test124()  throws Throwable  {
       String[] stringArray0 = Subject.StringTasks.splitByCharacterTypeCamelCase("rY-p8|A^~&|[$SgSGe3");
       assertEquals(17, stringArray0.length);
   }
 
   @Test(timeout = 4000)
   public void test125()  throws Throwable  {
       String[] stringArray0 = Subject.StringTasks.splitByCharacterType("6!zj_1JaUm?uV4QiSl/");
       assertEquals(18, stringArray0.length);
   }
 
   @Test(timeout = 4000)
   public void test126()  throws Throwable  {
       String[] stringArray0 = Subject.StringTasks.splitByCharacterType((String) null);
       assertNull(stringArray0);
   }
 
   @Test(timeout = 4000)
   public void test127()  throws Throwable  {
       String string0 = Subject.StringTasks.chomp("1");
       assertEquals("1", string0);
   }
 
   @Test(timeout = 4000)
   public void test128()  throws Throwable  {
       String string0 = Subject.StringTasks.chomp("cB{*Z@Qra~4pV6#'");
       assertEquals("cB{*Z@Qra~4pV6#'", string0);
   }
 
   @Test(timeout = 4000)
   public void test129()  throws Throwable  {
       String string0 = Subject.StringTasks.chop("");
       assertEquals("", string0);
   }
 
   @Test(timeout = 4000)
   public void test130()  throws Throwable  {
       String string0 = Subject.StringTasks.chop((String) null);
       assertNull(string0);
   }
 
   @Test(timeout = 4000)
   public void test131()  throws Throwable  {
       String string0 = Subject.StringTasks.chop("0@ChN$JywaSSyD3");
       assertEquals("0@ChN$JywaSSyD", string0);
       assertNotNull(string0);
   }
 
   @Test(timeout = 4000)
   public void test132()  throws Throwable  {
       Number number0 = Subject.NumberTasks.createNumber("9l");
       assertEquals(9L, number0);
   }
 
   @Test(timeout = 4000)
   public void test133()  throws Throwable  {
       boolean boolean0 = Subject.NumberTasks.isDigits("");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test134()  throws Throwable  {
       boolean boolean0 = Subject.StringTasks.isEmpty("");
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test135()  throws Throwable  {
       String string0 = Subject.StringTasks.chomp((String) null);
       assertNull(string0);
   }
 
   @Test(timeout = 4000)
   public void test136()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createNumber("");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // A blank string is not a valid number
          //
          verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test137()  throws Throwable  {
       String string0 = Subject.StringTasks.stripEnd((String) null, "B");
       assertNull(string0);
   }
 
   @Test(timeout = 4000)
   public void test138()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.NumberTasks.createNumber("Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it");
         fail("Expecting exception: NumberFormatException");
       
       } catch(NumberFormatException e) {
          //
          // Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it is not a valid number.
          //
          verifyException("comp5111.assignment.cut.Subject$NumberTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test139()  throws Throwable  {
       String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("wK`qTcoB*u.L[K}\"Oc&");
       assertEquals(3, stringArray0.length);
   }
 
   @Test(timeout = 4000)
   public void test140()  throws Throwable  {
       String[] stringArray0 = Subject.FilenameTasks.splitOnTokens("?");
       assertEquals(1, stringArray0.length);
   }
 
   @Test(timeout = 4000)
   public void test141()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isSeparator(']');
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test142()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isSeparator('/');
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test143()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isRFC3986HostName("uEqs/QsFWjPr~");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test144()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isRFC3986HostName(".");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test145()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isRFC3986HostName("");
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test146()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isRFC3986HostName("x");
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test147()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isIPv6Address("0");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test148()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isIPv6Address("cB{*Z@Qra~4pV6#'");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test149()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isIPv6Address("N9Sm0TQ:qOCqP;#");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test150()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isIPv6Address("");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test151()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isIPv6Address(":");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test152()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isIPv6Address("Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test153()  throws Throwable  {
       boolean boolean0 = Subject.FilenameTasks.isIPv4Address("+;-4");
       assertFalse(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test154()  throws Throwable  {
       int int0 = Subject.FilenameTasks.indexOfLastSeparator((String) null);
       assertEquals((-1), int0);
   }
 
   @Test(timeout = 4000)
   public void test155()  throws Throwable  {
       String string0 = Subject.FilenameTasks.getName((String) null);
       assertNull(string0);
   }
 
   @Test(timeout = 4000)
   public void test156()  throws Throwable  {
       // Undeclared exception!
       try { 
         Subject.FilenameTasks.flipSeparator(' ');
         fail("Expecting exception: IllegalArgumentException");
       
       } catch(IllegalArgumentException e) {
          //
          //  
          //
          verifyException("comp5111.assignment.cut.Subject$FilenameTasks", e);
       }
   }
 
   @Test(timeout = 4000)
   public void test157()  throws Throwable  {
       Subject subject0 = new Subject();
   }
 
   @Test(timeout = 4000)
   public void test158()  throws Throwable  {
       Subject.BooleanTasks subject_BooleanTasks0 = new Subject.BooleanTasks();
   }
 
   @Test(timeout = 4000)
   public void test159()  throws Throwable  {
       Subject.StringTasks subject_StringTasks0 = new Subject.StringTasks();
       assertEquals((-1), Subject.StringTasks.INDEX_NOT_FOUND);
   }
 
   @Test(timeout = 4000)
   public void test160()  throws Throwable  {
       Subject.FilenameTasks subject_FilenameTasks0 = new Subject.FilenameTasks();
   }
 
   @Test(timeout = 4000)
   public void test161()  throws Throwable  {
       boolean boolean0 = Subject.ArrayTasks.isEmpty((int[]) null);
       assertTrue(boolean0);
   }
 
   @Test(timeout = 4000)
   public void test162()  throws Throwable  {
       Subject.ArrayTasks subject_ArrayTasks0 = new Subject.ArrayTasks();
       assertEquals((-1), Subject.ArrayTasks.INDEX_NOT_FOUND);
   }
 
   @Test(timeout = 4000)
   public void test163()  throws Throwable  {
       Subject.GregorianTasks subject_GregorianTasks0 = new Subject.GregorianTasks();
       assertEquals((-999999999), Subject.GregorianTasks.MIN_YEAR);
   }
 
   @Test(timeout = 4000)
   public void test164()  throws Throwable  {
       Subject.CharTasks subject_CharTasks0 = new Subject.CharTasks();
       assertEquals('\u0000', Subject.CharTasks.NUL);
   }
 
   @Test(timeout = 4000)
   public void test165()  throws Throwable  {
       int int0 = Subject.CharTasks.compare(')', 'c');
       assertEquals((-58), int0);
   }
 
  @Test(timeout = 4000)
  public void test0166() throws Throwable {
      boolean boolean1 = comp5111.assignment.cut.Subject.NumberTasks.isDigits("h");
      org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
  }

  @Test(timeout = 4000)
  public void test0167() throws Throwable {
      boolean boolean1 = comp5111.assignment.cut.Subject.StringTasks.isNumeric((java.lang.CharSequence) "h");
      org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
  }

   @Test(timeout = 4000)
   public void test168()  throws Throwable  {
       int int0 = Subject.NumberTasks.compare((byte)0, (byte)0);
       assertEquals(0, int0);
   }
 
   @Test(timeout = 4000)
   public void test169()  throws Throwable  {
       Subject.NumberTasks subject_NumberTasks0 = new Subject.NumberTasks();
   }
 }
 